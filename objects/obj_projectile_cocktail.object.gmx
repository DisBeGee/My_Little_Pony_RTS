<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_spell_acidcocktail2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* -- setup variables -- */ 
/* var */ fastness = 4
/* var */ targetx = 99
/* var */ targety = 99
/* var */ damage = 99
/* var */ target = 99
/* var */ init_dir = 99
/* var */ aoe = 99
/* var */ prevx = 0;
/* var */ prevy = 0;
/* var */ 
/* var */ bounces = 18;
/* var */ bounce_range = 200;
/* var */ stun_length = 30;
/* var */ 
/* var */ targetable_units = obj_enem_unit_parent; // New (jan 2013)
/* -- bloody graphics -- */
/* var */ anim[0] = spr_spell_acidcocktail2
/* var */ anim[1] = spr_spell_acidcocktail2
/* var */ anim[2] = spr_spell_acidcocktail2
/* var */ anim[3] = spr_spell_acidcocktail2
/* var */ anim[4] = spr_spell_acidcocktail2
/* var */ anim[5] = spr_spell_acidcocktail2
/* var */ anim[6] = spr_spell_acidcocktail2
/* var */ anim[7] = spr_spell_acidcocktail2

// Network
create_multi = false; // to create for other clients
owned = true; // if player owns this projectile
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//move to target
if instance_exists(target)
{
    mp_linear_step(target.x,target.y,fastness,false);// to make this homing, 1. change tagetx/y with target.x/y and use potential instead of linear
}
else
{
    instance_destroy();
    exit;
}

//anti-stuck code
if (x=xprevious&amp;&amp;y=yprevious)
{
    deg = point_direction(x,y,target.x,target.y);
    rad = (deg*pi)/180;
    x += 5*(cos(rad));
    y += 5*(-sin(rad));
}

//bouncing
if (distance_to_object(target) &lt;= 1) //if it has hit target
{
    //stun target
    if (global.multiplayer_game) // Network
    {
        if (owned)
        {
            // send stun message
            write_ushort(global.ServerSocket,22); //message header: forward to single client
            write_ubyte(global.ServerSocket,6); // message size
            write_ubyte(global.ServerSocket,target.ownerId); //recipient
            write_ushort(global.ServerSocket,1030); // update unit stun state
            write_ushort(global.ServerSocket,target.netId); // unit id (net id)
            write_ushort(global.ServerSocket,stun_length); //stun length
        }
    }
    else { // non-multiplayer
    target.stun_counter = stun_length;
    if (target.stunned==false)
    {
        target.ailment_count += 1;
        target.stunned = true;
    }
    }
    
    targx = target.x;
    targy = target.y;
    instance_deactivate_object(target);
    tmp_next = instance_nearest(x,y,targetable_units);
    instance_activate_object(target);
    
    bounces -= 1;
    if (bounces &gt; 0)
    {
        if (instance_exists(target)) //creating bouncing stunner
        {
            if ((point_distance(x,y,targx,targy))&lt;=bounce_range)
            {
                instance_create(targx, targy, obj_explo_1_g);
                new_bounce = instance_create(target.x, target.y, obj_projectile_cocktail)
                new_bounce.target = tmp_next;
                new_bounce.bounces = bounces;
                
                // Network
                new_bounce.create_multi = true; // do not recreate for others
                new_bounce.owned = owned; // copy owned variable
                new_bounce.targetable_units = targetable_units; // copy variable
            }
        }
    }
    
    instance_destroy();
}

// Network - start
if (global.multiplayer_game)
{
    if (create_multi == false) // create spell for other players
    {
        write_ushort(global.ServerSocket,20); // message header: broadcast message
        write_ubyte(global.ServerSocket,11); // message size
        write_ushort(global.ServerSocket,600); // message header: create spell projectile
        write_ushort(global.ServerSocket,2); // spell index (used for spell handler)
        write_ubyte(global.ServerSocket,global.p_team[global.PlayerId]); // spell team owner
        //other info needed
        write_short(global.ServerSocket,x); // xpos
        write_short(global.ServerSocket,y); // ypos
        write_ushort(global.ServerSocket,target.netId) // target id (net id)

        create_multi = true;
    }
}
// Network - end
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// drawing the diff dirs of the projectile - start
if direction &gt; 247 &amp;&amp; direction &lt; 292 {draw_sprite(anim[0],-1,x,y);}
if direction &gt; 292 &amp;&amp; direction &lt; 332 {draw_sprite(anim[1],-1,x,y);}
if (direction &gt; 332 &amp;&amp; direction &lt; 360) or (direction &gt; 0 &amp;&amp; direction &lt; 22) {draw_sprite(anim[2],-1,x,y);}
if direction &gt; 22 &amp;&amp; direction &lt; 67 {draw_sprite(anim[3],-1,x,y);}
if direction &gt; 67 &amp;&amp; direction &lt; 112 {draw_sprite(anim[4],-1,x,y);}
if direction &gt; 112 &amp;&amp; direction &lt; 157 {draw_sprite(anim[5],-1,x,y);}
if direction &gt; 157 &amp;&amp; direction &lt; 202 {draw_sprite(anim[6],-1,x,y);}
if direction &gt; 202 &amp;&amp; direction &lt; 247 {draw_sprite(anim[7],-1,x,y);}
// drawing the diff dirs of the projectile - end</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

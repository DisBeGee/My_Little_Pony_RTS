<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9999999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>map_col_width = 32
map_row_height = 32
debug = false

map =  as_map_create(room_width/map_col_width, room_height/map_row_height, 1);
flying_map = as_map_create(room_width/map_col_width, room_height/map_row_height,1);

//grid = ds_grid_create(room_width/map_col_width,room_height/map_row_height)
for (i=0;i&lt;room_width;i+=map_col_width) {
    for (z=0;z&lt;room_height;z+=map_row_height) {
        cell[i/map_col_width,z/map_row_height] = 1
        //ds_grid_set(grid,i,z,1)
    }
}

alarm[0] = 50    

if (debug) {
    debug_surface = surface_create(room_width,room_height)
    

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;room_width;i+=map_col_width) {
    for (z=0;z&lt;room_height;z+=map_row_height) {
        //ds_grid_set(grid,i,z,(as_map_getcell(map,i/map_col_width,z/map_row_height)))
        if (cell[i/map_col_width,z/map_row_height] != as_map_getcell(map,i/map_col_width,z/map_row_height)) {
            cell[i/map_col_width,z/map_row_height] = as_map_getcell(map,i/map_col_width,z/map_row_height)
        }
    }
}
if (debug) {
    surface_set_target(debug_surface)
    draw_clear(c_white)
    draw_set_alpha(1)
    for (i=0;i&lt;room_width;i+=map_col_width) {
        for (z=0;z&lt;room_height;z+=map_row_height) {
            
            if (cell[i/map_col_width,z/map_col_width] &lt; 0) {
                //draw_rectangle_color(i,z,i+64,z+32,c_red,c_red,c_red,c_red,0)
                draw_rectangle_color(i,z,i+map_col_width,z+map_row_height,c_red,c_red,c_red,c_red,0)
            }
            
            else {
                //draw_rectangle_color(i,z,i+64,z+32,c_green,c_green,c_green,c_green,0)
                draw_rectangle_color(i,z,i+map_col_width,z+map_row_height,c_green,c_green,c_green,c_green,0)
            }
        }
    }
    surface_reset_target()
}
alarm[0] = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug) {

draw_surface_ext(debug_surface,0,0,1,1,0,c_white,0.3)

/*
draw_set_alpha(0.3)
for (i=0;i&lt;room_width;i+=map_col_width) {
    for (z=0;z&lt;room_height;z+=map_row_height) {
        
        if (cell[i,z] &lt; 0) {
            //draw_rectangle_color(i,z,i+64,z+32,c_red,c_red,c_red,c_red,0)
            draw_rectangle_color(i,z,i+map_col_width,z+map_row_height,c_red,c_red,c_red,c_red,0)
        }
        
        else {
            //draw_rectangle_color(i,z,i+64,z+32,c_green,c_green,c_green,c_green,0)
            draw_rectangle_color(i,z,i+map_col_width,z+map_row_height,c_green,c_green,c_green,c_green,0)
        }
    }
}*/


if (as_map_getcell(map,mouse_x/map_col_width,mouse_y/map_row_height)) {
    draw_set_color(c_blue)
    draw_rectangle(mouse_x-3,mouse_y-3,mouse_x+3,mouse_y+3,true)
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

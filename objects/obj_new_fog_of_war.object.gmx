<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000002</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprite47</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0;i&lt;room_width;i+=64) {
    arrayx[i] = false
}

for (z=0;z&lt;room_height;z+=32) {
    arrayy[z] = false
}

cliff_list = ds_list_create()
cliff_list_x = ds_list_create()
cliff_list_y = ds_list_create()
cliff_grid = ds_grid_create(room_width/64,room_height/32);

pos_x = 0
pos_y = 0
pos_idx = 0
pos_idy = 0

alarm[0] = 100

array_cliff_units[0] = 0;
acu = 0;


uniterr = instance_create(-1000,-1000,obj_ally_unit_parent)
builderr = instance_create(-1000,-1000,obj_ally_building_parent)


//Debugging to draw cliffs to surface
/**
    All code needed to draw cliffs to surface located in:
    obj_new_fog_of_war.Create, obj_new_fog_of_war.Alarm[0], CliffSidesLeft.Alarm[0]
**/
//global.cliffSurface = surface_create(room_width,room_height);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
varx = ds_list_find_value(cliff_list_x,0)

v=0;
acu=0;
array_cliff_units[acu] = 0
while(v != instance_number(obj_unit_template_multi)) { //A while loop, you can look in the game maker documentation for more on that
    tempinstance=instance_find(obj_unit_template_multi,i); //If you want, you can check every object simply by using "all" instead of obj_appletree
    if (tempinstance.cliff_sight = true)  //Tests to make sure that a varible of an instance meets specifications
    {
        array_cliff_units[acu] = tempinstance
        acu += 1;
    }
    v+=1; //Advances the index by one
}
*/


//Debugging to save cliffs to surface
//surface_save(global.cliffSurface,"test5.png")
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Catching errors
/*

nearally = instance_exists(obj_ally_unit_parent)
nearbuilding = instance_exists(obj_ally_building_parent)

if (nearally &lt;= 0) || (nearbuilding &lt;= 0) {
    if nearally &lt;= 0 {
        instance_create(-1000,-1000,obj_ally_unit_parent)
    }
    if nearbuilding &lt; 0 {
        instance_create(-1000,-1000,obj_ally_building_parent)
    }
}
//End catching errors
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


/*
for (i=0;i&lt;room_width;i+=64) {
    arrayx[i] = false
}

for (z=0;z&lt;room_height;z+=32) {
    arrayy[z] = false
}
*/
/*
for (i=0;i&lt;room_width;i+=64) {
    for (z=0;z&lt;room_height;z+=32) {
        arraypos[i,z] = false
    }
}
*/

//ds_list_clear(cliff_list)

/*
if ds_list_size(cliff_list) &gt;= 0 {
    instancenear = ds_list_find_value(cliff_list,1)
    
    //pos_x = (instancenear).x;
    //pos_y = (instancenear).y;
}
*/
/*
v=0;
acu=0;
array_cliff_units[acu] = 0
while(v != instance_number(obj_ally_unit_parent)) { //A while loop, you can look in the game maker documentation for more on that
    tempinstance=instance_find(obj_ally_unit_parent,v); //If you want, you can check every object simply by using "all" instead of obj_appletree
    
    if tempinstance.cliff_sight = true {
        //array_cliff_units[acu] = tempinstance
        //ds_list_add(cliff_list_x,tempinstance.x)
        //ds_list_add(cliff_list_y,tempinstance.y)
        tempinsx = floor(tempinstance.x/64)
        tempinsy = floor(tempinstance.y/32)
        ds_grid_add(cliff_grid,tempinsx,tempinsy,acu)
        acu+=1
    }
    
    
    
    
    
    /*
    with (tempinstance) {
        if (variable_local_exists("cliff_sight")) {
            if (cliff_sight == true) {
                obj_new_fog_of_war.array_cliff_units[obj_new_fog_of_war.acu] = id
                obj_new_fog_of_war.acu +=1;
            }
        }
    }
    */
   // v += 1;
    
    /*
    if (variable_local_exists("tempinstance.cliff_sight")) {
        if (tempinstance.cliff_sight = true)  //Tests to make sure that a varible of an instance meets specifications
        {
            array_cliff_units[acu] = tempinstance
            acu += 1;
        }
    }
    v+=1; //Advances the index by one
    */
//}


//ds_list_clear(cliff_list_x)
//ds_list_clear(cliff_list_y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_alpha(1)


for (i=0;i&lt;room_width;i+=256) {
    
    for (z=0;z&lt;room_height;z+=128) {
    
        if (
        view_xview[0] &lt; i + 128 &amp;&amp; //Left Screen Limit
        view_xview[0] &gt; i - 1420 &amp;&amp; //Right Screen Limit (i - x)
        view_yview[0] &lt; z + 64 &amp;&amp; //Top  Screen Limit
        view_yview[0] &gt; z - 680 ) //BOttom Screen Limit (z - y)
        {
    
            nearally = instance_nearest(i,z,obj_ally_unit_parent);
            dist[i,z] = point_distance(i,z,nearally.x,nearally.y);
            newdist[i,z] = point_distance(i,z,nearally.x-100,nearally.y); //Added to fix bug
            nearbuilding = instance_nearest(i,z,obj_ally_building_parent);
            distbuild[i,z] = point_distance(i,z,nearbuilding.x,nearbuilding.y)
            
            if (dist[i,z] &gt; 500 &amp;&amp; distbuild[i,z] &gt; 700) {
            
                draw_circle_color(i,z,150,c_teal,c_teal,0)
            
            }
            
            else {
            
                for (j=i-128;j&lt;i+128;j+=64) { //Edits: i+257 -&gt; i+128
                        
                        for (w=z-64;w&lt;z+64;w+=64) {    //Edits: z+129 -&gt; z+64
                        
                            if (
                            view_xview[0] &lt; i + 64 &amp;&amp; //Left Screen Limit           *THESE VALUES MUST BE LOWER OR SAME AS
                            view_xview[0] &gt; i - 1412 &amp;&amp; //Right Screen Limit        VALUES FOR LARGER CIRCLES ABOVE*
                            view_yview[0] &lt; z + 64 &amp;&amp; //Top Screen Limit
                            view_yview[0] &gt; z - 680) //Bottom Screen Limit
                            {
                                
                                if j&lt;0 {j=0}
                                if w&lt;0 {w=0}
                                
                                nearally = instance_nearest(j,w,obj_ally_unit_parent);
                                dist = point_distance(j,w,nearally.x,nearally.y);
                                nearbuilding = instance_nearest(j,w,obj_ally_building_parent);
                                distbuild = point_distance(j,w,nearbuilding.x,nearbuilding.y)
                                
                                
                                //if !(tile_layer_find(999999,j,w) &gt; 1000) {
                                if !(collision_point(j,w,EntireCliffs,true,true)) {
                                    if (dist &gt; 350 &amp;&amp; distbuild &gt; 500) {                  //Block view if greater than 350 units    
                                        //draw_circle_color(j,w,60,c_black,c_black,0)           
                                        draw_sprite(TheFog,0,j,w)                      
                                    }
                                }
                                
                                //else if (tile_layer_find(999999,j,w) &gt; 1000) {  //If tile IS a cliff tile + drawing on top of normal tiles
                                else if (collision_point(j,w,EntireCliffs,true,true)) {
                                    
                                    if instance_exists(obj_unit_cliff) &amp;&amp; instance_exists(obj_building_cliff) {
                                        nearcliff = instance_nearest(j,w,obj_unit_cliff);
                                        dist[j,w] = point_distance(j,w,nearcliff.x,nearcliff.y)
                                        nearbuild = instance_nearest(j,w,obj_building_cliff)
                                        distbuild[j,w] = point_distance(j,w,nearbuild.x,nearbuild.y)
                                        if (dist[j,w] &gt; 350 &amp;&amp; distbuild[j,w] &gt; 500) {
                                            //draw_circle_color(j,w,60,c_black,c_black,0)
                                            draw_sprite(TheFog,0,j,w) 
                                        }
                                    }
                                    
                                    else if instance_exists(obj_unit_cliff) {
                                        nearcliff = instance_nearest(j,w,obj_unit_cliff);
                                        dist[j,w] = point_distance(j,w,nearcliff.x,nearcliff.y)
                                        if (dist[j,w] &gt; 350) {
                                            //draw_circle_color(j,w,60,c_black,c_black,0)
                                            draw_sprite(TheFog,0,j,w) 
                                        }                                        
                                    }
                                    
                                    else if instance_exists(obj_building_cliff) {
                                        nearbuild = instance_nearest(j,w,obj_building_cliff);
                                        distbuild[j,w] = point_distance(j,w,nearbuild.x,nearbuild.y)
                                        if (distbuild[j,w] &gt; 500) {
                                            //draw_circle_color(j,w,60,c_black,c_black,0)
                                            draw_sprite(TheFog,0,j,w) 
                                        }                                                 
                                    }
                                    
                                    else if !(instance_exists(obj_unit_cliff) || instance_exists(obj_building_cliff)) {
                                        //draw_circle_color(j,w,60,c_black,c_black,0)
                                        draw_sprite(TheFog,0,j,w) 
                                    }
                                }
                                
                            }
                        }
                        
                }
            
            }
        }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

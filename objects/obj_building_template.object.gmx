<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_house_mask</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_building_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// - setup - //
/*var*/ //area_size = 30; //this is used for resource gathering - pretty much the size of the radius of th building
/*var*/ is_built = true; // if the structure has been fully built
/*var*/ is_placed = true; // if the structure has been placed on the ground
/*var*/ place_yes = false; // if the area is clear for the building to be built on
/*var*/ place_x = 0; //where it is going to be placed
/*var*/ place_y = 0; //where it is going to be placed
/*var*/ selected = false;
/*var*/ //selectcx1 = -14; // the folllowing are the co-ordinates for the select circle
/*var*/ //selectcx2 = 14;
/*var*/ //selectcy1 = 5;
/*var*/ //selectcy2 = 17;
/*var*/ builder = false; //if the building can make cars or units
/*var*/ //unit_pic = spr_man_pic; // the pic for the unit on the hud
/*var*/ building_depth = 0;
/*var*/ build_range = 250; // how far you can build from the closest ally
/*var*/ 
// - graphics - //
/*var*/ //g_build_yes = spr_house_y;
/*var*/ //g_build_no = spr_house_n;
/*var*/ //g_building = spr_house_building;
/*var*/ //g_built = spr_house_done;
/*var*/ //g_build_num = 4; //number of sprites in the building animation
/*var*/ 
// - building stats - //
/*var*/ //unit_name = "temper to go"; 
/*var*/ //unit_hp_max = 1000;
/*var*/ //unit_hp = 1000;
/*var*/ 
/*var*/ 
/*var*/ 
// - building of structure - //
/*var*/ //build_time = 300; //how long it takes to build
/*var*/ build_progress = 0; //how much of it has been built
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/* - Making Units - */
/*var*/ can_make = true; //if the building can make units or research tech
/*var*/ make_progress = 0;
/*var*/ make_limit = 1000;
/*var*/ make_power = 99; // how fast it can make the unit
/*var*/ make_object = 99; //what is going to be made - unit/research
/*var*/ make_time = false; //if there is at least 1 unit in building que
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/* - Waypointing - */
/*var*/ //def_waypointposx = 0; // these values are relative to buildings position
/*var*/ //def_waypointposy = 40; // these values are relative to buildings position
/*var*/ waypointx = 0;
/*var*/ waypointy = 0;
/*var*/ def_waypointx = 0;
/*var*/ def_waypointy = 0;
/*var*/ //waypoint_spr = spr_house_waypoint;
/*var*/ waypoint_depth = 0;
/*var*/ 
/* - HUD - */
/*var*/ //hud_gen_s1 = obj_unit1_template;
/*var*/ //hud_gen_s2 = 99;
/*var*/ //hud_gen_s3 = 99;
/*var*/ //hud_gen_s4 = 99;
/*var*/ //hud_gen_s5 = 99;
/*var*/ //hud_gen_s6 = 99;
/*var*/ //hud_gen_s7 = 99;
/*var*/ //hud_gen_s8 = 99;
/*var*/ //hud_gen_s9 = 99;
/*var*/ //hud_gen_s10 = 99;
/*var*/ //hud_gen_s11 = 99;
/*var*/ //hud_gen_s12 = 99;
/*var*/ //hud_gen_s13 = 99;
/*var*/ //hud_gen_s14 = 99;
/*var*/ //hud_gen_s15 = 99;
/*var*/ //hud_gen_s16 = 99;
/*var*/ //hud_gen_s17 = 99;
/*var*/ //hud_gen_s18 = 99;
/*var*/ //hud_build_s1 = 99;
/*var*/ //hud_build_s2 = 99;
/*var*/ //hud_build_s3 = 99;
/*var*/ //hud_build_s4 = 99;
/*var*/ //hud_build_s5 = 99;
/*var*/ //hud_build_s6 = 99;
/*var*/ //hud_build_s7 = 99;
/*var*/ //hud_build_s8 = 99;
/*var*/ //hud_build_s9 = 99;
/*var*/ //hud_build_s10 = 99;
/*var*/ //hud_build_s11 = 99;
/*var*/ //hud_build_s12 = 99;
/*var*/ //hud_build_s13 = 99;
/*var*/ //hud_build_s14 = 99;
/*var*/ //hud_build_s15 = 99;
/*var*/ //hud_build_s16 = 99;
/*var*/ //hud_build_s17 = 99;
/*var*/ //hud_build_s18 = 99;
/* - for HUD - */
/*var*/ is_is_building = true;

// - Build Queue - //
/*var*/ hud_buildq_cur = 99;
/*var*/ hud_buildq_s1 = 99;
/*var*/ hud_buildq_s2 = 99;
/*var*/ hud_buildq_s3 = 99;
/*var*/ hud_buildq_s4 = 99;
/*var*/ hud_buildq_s5 = 99;
/*var*/ hud_buildq_s6 = 99;
/*var*/ buildq_cur = 99; //objects of units
/*var*/ buildq_trans_s1 = 99;
/*var*/ buildq_trans_s2 = 99;
/*var*/ buildq_trans_s3 = 99;
/*var*/ buildq_trans_s4 = 99;
/*var*/ buildq_trans_s5 = 99;
/*var*/ buildq_trans_s6 = 99;
/*var*/ buildq_cur_n = 99; //name of units
/*var*/ buildq_trans_s1_n = 99;
/*var*/ buildq_trans_s2_n = 99;
/*var*/ buildq_trans_s3_n = 99;
/*var*/ buildq_trans_s4_n = 99;
/*var*/ buildq_trans_s5_n = 99;
/*var*/ buildq_trans_s6_n = 99;
/*var*/ buildq_cur_i = 99; //icons of units
/*var*/ buildq_trans_s1_i = 99;
/*var*/ buildq_trans_s2_i = 99;
/*var*/ buildq_trans_s3_i = 99;
/*var*/ buildq_trans_s4_i = 99;
/*var*/ buildq_trans_s5_i = 99;
/*var*/ buildq_trans_s6_i = 99;
/*var*/ buildq_cur_time = 99; // build times of units
/*var*/ buildq_trans_s1_time = 99;
/*var*/ buildq_trans_s2_time = 99;
/*var*/ buildq_trans_s3_time = 99;
/*var*/ buildq_trans_s4_time = 99;
/*var*/ buildq_trans_s5_time = 99;
/*var*/ buildq_trans_s6_time = 99;
/*var*/ buildq_contain = 0;
/*var*/ buildq_max = 6; //include '0' as the one currently being made - so 1 being made plus six in queue
/*var*/ 
/*var*/ 
/*var*/ 
/* - for Health Bar - */
/*var*/ //healthbar_x = -14;
/*var*/ //healthbar_y = -26;
/*var*/ //healthbar_length = 28;
/*var*/ //healthbar_height = 4;
/*var*/ //healthbar_fg_col = c_lime;
/*var*/ //healthbar_bg_col = c_black;
/*var*/ 


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Health - start
if unit_hp  &lt;= 0 
{ 
    if selected = true 
    {
        selected = false;
        global.number_of_selected -= 1 ;
    } 
    //death animation here
    instance_create(x,y,obj_explo_2);
    instance_destroy(); 
}
else if (unit_hp &gt; unit_hp_max)
{
    unit_hp = unit_hp_max;
}
// Health - end

//Building placement - start
if build_progress &gt;= build_time
{
    is_built = true;
}
//Building placement - end

//HUD - start
if selected = true &amp;&amp; global.number_of_selected = 1
{
    obj_HUD.target = self.id;
}
//HUD - end

//making units - start
if buildq_cur = 99 &amp;&amp; make_time = true
{
    make_progress = 0;
    make_time = false;
}

if make_time = true
{
    make_progress += make_power;
    
    if make_progress &gt;= make_limit
    {
        make_progress = make_limit;
        temp = instance_create(x+def_waypointposx,y+def_waypointposy+5,buildq_cur); //temp is for sending them to the waypoint
        temp.move_x = waypointx;
        temp.move_y = waypointy;
        temp.able_to_move = true;
        buildq_contain -= 1;
        buildq_cur = 99; 
        make_progress = 0; 
        make_time = false; 

        // build queue for units
        if (buildq_trans_s1 != 99){make_power=buildq_trans_s1_time;buildq_cur=buildq_trans_s1;make_time=true;buildq_cur_n=buildq_trans_s1_n;buildq_cur_i=buildq_trans_s1_i;buildq_trans_s1=99;}
        if (buildq_trans_s2 != 99){buildq_trans_s1=buildq_trans_s2;buildq_trans_s1_time=buildq_trans_s2_time;buildq_trans_s1_n=buildq_trans_s2_n;buildq_trans_s1_i=buildq_trans_s2_i;buildq_trans_s2=99;}
        if (buildq_trans_s3 != 99){buildq_trans_s2=buildq_trans_s3;buildq_trans_s2_time=buildq_trans_s3_time;buildq_trans_s2_n=buildq_trans_s3_n;buildq_trans_s2_i=buildq_trans_s3_i;buildq_trans_s3=99;}
        if (buildq_trans_s4 != 99){buildq_trans_s3=buildq_trans_s4;buildq_trans_s3_time=buildq_trans_s4_time;buildq_trans_s3_n=buildq_trans_s4_n;buildq_trans_s3_i=buildq_trans_s4_i;buildq_trans_s4=99;}
        if (buildq_trans_s5 != 99){buildq_trans_s4=buildq_trans_s5;buildq_trans_s4_time=buildq_trans_s5_time;buildq_trans_s4_n=buildq_trans_s5_n;buildq_trans_s4_i=buildq_trans_s5_i;buildq_trans_s5=99;}
        if (buildq_trans_s6 != 99){buildq_trans_s5=buildq_trans_s6;buildq_trans_s5_time=buildq_trans_s6_time;buildq_trans_s5_n=buildq_trans_s6_n;buildq_trans_s5_i=buildq_trans_s6_i;buildq_trans_s6=99;}
        
        /*  THIS IS OLD CRAP (BACK WHEN THERE WAS NO UNIT QUEUE)
        // if ... what evs - Get the next guy in que and place him as the one to start building - also need to get make_power for that unit
        //else
        //{
          make_object = 99; //should be commented out for now
          make_progress = 0; //should be commented out for now
          make_time = false; //should be commented out for now
        //}
        */
    }
}
//Making units - end

// correcting depth
if (is_placed==false &amp;&amp; is_built==false) depth=-9000002;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{


// waypointing - start
if selected = true
{
    if distance_to_point(mouse_x,mouse_y) &lt;= 1
    {
        waypointx = def_waypointx;
        waypointy = def_waypointy;
        waypoint_depth = -def_waypointy;
    }
    else
    {
        waypointx = mouse_x;
        waypointy = mouse_y;
        waypoint_depth = -mouse_y;
    }
}
//waypoinying - end


}
//if mouse is not in hud - end

//if has not been placed, delete
if is_placed = false
{
    instance_destroy();
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{



// Building placement - start
if is_placed = false
{
    if place_yes = true
    {
        is_placed = true;
        x = place_x;
        y = place_y;
        building_depth = -y;
        def_waypointx = x+def_waypointposx;
        def_waypointy = y+def_waypointposy;
        waypointx = def_waypointx;
        waypointy = def_waypointy;
    }
}
// Building placement - end

//selection - end
if is_placed = true
{
    if selected = true &amp;&amp; distance_to_point(mouse_x,mouse_y) &gt;= 1
    {
        selected = false;
        global.number_of_selected -= 1;
    }
}
//selection - end



}
//if mouse is not in hud - start</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{



// Selection - start
if is_placed = true
{
    if selected = false
    {
        selected = true;
        global.number_of_selected +=1;
    }
}
// Selection - end



}
// mouse not in hud - end</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Selection - start
if selected = true
{
    depth = building_depth;
    draw_set_color(c_lime);
    draw_ellipse(x+selectcx1,y+selectcy1,x+selectcx2,y+selectcy2,true);
}
//Selection - end

//Building placement - start
if is_built = false &amp;&amp; is_placed = false
{
    x = -100;
    y = -100;
    temp_nearest = instance_nearest(mouse_x,mouse_y,all);
    nrst_ally = instance_nearest(mouse_x,mouse_y,obj_ally_parent);
    x = mouse_x;
    y = mouse_y;
    if (distance_to_object(temp_nearest) &lt;= area_size || distance_to_object(nrst_ally)&gt;build_range )
    {
        temp_x = x;
        temp_y = y;
        place_yes = false;
        depth = -9000002;
        draw_sprite(g_build_no,-1,temp_x,temp_y);
        x = -100;
        y = -100;
    }
    else
    {
        place_x = mouse_x;
        place_y = mouse_y;
        temp_x = x;
        temp_y = y;
        place_yes = true;
        depth = -9000002
        draw_sprite(g_build_yes,-1,temp_x,temp_y);
        x = -100;
        y = -100;
    }
}

if is_built = false &amp;&amp; is_placed = true
{
    depth = building_depth;
    draw_sprite(g_building,floor((build_progress/build_time)*g_build_num),x,y);
}

if is_built = true &amp;&amp; is_placed = true
{
    depth = building_depth;
    draw_sprite(g_built,-1,x,y);
    
    if (selected==true){depth=waypoint_depth;draw_sprite(waypoint_spr,-1,waypointx,waypointy);}
}
//Building placement - end

//Health Bar - start
if ((is_placed==true)&amp;&amp;((selected==true)||(distance_to_point(mouse_x, mouse_y)&lt;=0)))
{
    depth = building_depth;
    _len = (healthbar_length*(unit_hp/unit_hp_max)); 
    draw_set_alpha(1);
    draw_set_color(healthbar_bg_col);
    draw_rectangle(x+healthbar_x,y+healthbar_y,x+healthbar_x+healthbar_length,y+healthbar_y+healthbar_height,false);
    draw_set_color(healthbar_fg_col);
    draw_rectangle(x+healthbar_x+1,y+healthbar_y+1,x+healthbar_x+_len-1,y+healthbar_y+healthbar_height-1,false);
}
//Health Bar - end
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

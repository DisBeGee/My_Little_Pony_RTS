<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Client Variables
//global.ClientName = "player" //name of player as seen by others
//global.ClientState = 0 // 0 = looking to connect, 8 = playing game
//global.PlayerId = 99; //Id of the client

//global.p_race[] // races of all other players (includes self) [NOT USED at the moment]
//global.p_team[] //which teams all other players are on (includes self)
//global.p_col[] //colors of all other players (includes self)
//global.p_name[] //names of all other players (includes self)

//Server Details
//global.ServerPort = 12345;
//global.ServerAddr = "";
//global.ServerSocket = -1;
//global.ServerPlyrCnt = 0;

//Lobby info
lobby_p_count = 0;
//lobby_p_name[]
//lobby_p_race[]  // or faction (just name)
//lobby_p_team[]
//lobby_p_color[]
lobby_map_name = "Recieving map name";
lobby_infox = 5;
lobby_infoy = 5;

//Network Id Table
//global.netid_table[netId] = actual id
global.netid_table[0] = 99; //no one (nonexistant object id)

//Personal state vars (initializaiton)
//setup
state = 0;
netid_initialization = false;

// mouse buffer
mx = 0;
my = 0;
mleft = 0;
mright = 0;
mleftpres = 0;
mrightpres = 0;
mleftrel = 0;
mrightrel = 0;

//keyboard buffer
// TODO

//State 1 Varibales
timer1len = 30;
timer1 = 0;

//temp
//global.ClientName = get_string("Enter your player name",global.ClientName);
//global.ServerAddr = get_string("Enter host address","127.0.0.1");

//clear sockets??
//tcp_receive_available(global.ServerSocket);
//tcp_receive_available(global.ServerSocket);


//For debugging
tmp_sockSize = 0;


/* - Unit Aliases - */ //TEMPORARY POSITION, MOVE IT SOMEWHERE MORE APPROPRIATE!!
// obj_unit_type[type,player]

// obj_p#_unit_parent
global.obj_unit_type[0,0] = obj_p0_unit_parent; 
global.obj_unit_type[0,1] = obj_p1_unit_parent;
global.obj_unit_type[0,2] = obj_p2_unit_parent;
global.obj_unit_type[0,3] = obj_p3_unit_parent;
global.obj_unit_type[0,4] = obj_p4_unit_parent;
global.obj_unit_type[0,5] = obj_p5_unit_parent;
global.obj_unit_type[0,6] = obj_p6_unit_parent;
global.obj_unit_type[0,7] = obj_p7_unit_parent;
global.obj_unit_type[0,8] = obj_p8_unit_parent;
global.obj_unit_type[0,9] = obj_p9_unit_parent;

// obj_p#_unit_example
global.obj_unit_type[1,0] = obj_p0_unit_example;
global.obj_unit_type[1,1] = obj_p1_unit_example;
global.obj_unit_type[1,2] = obj_p2_unit_example;
global.obj_unit_type[1,3] = obj_p3_unit_example;
global.obj_unit_type[1,4] = obj_p4_unit_example;
global.obj_unit_type[1,5] = obj_p5_unit_example;
global.obj_unit_type[1,6] = obj_p6_unit_example;
global.obj_unit_type[1,7] = obj_p7_unit_example;
global.obj_unit_type[1,8] = obj_p8_unit_example;
global.obj_unit_type[1,9] = obj_p9_unit_example;

// obj_p#_unit_workhorse
global.obj_unit_type[2,0] = obj_p0_unit_workhorse;
global.obj_unit_type[2,1] = obj_p1_unit_workhorse;
global.obj_unit_type[2,2] = obj_p2_unit_workhorse;
global.obj_unit_type[2,3] = obj_p3_unit_workhorse;
global.obj_unit_type[2,4] = obj_p4_unit_workhorse;
global.obj_unit_type[2,5] = obj_p5_unit_workhorse;
global.obj_unit_type[2,6] = obj_p6_unit_workhorse;
global.obj_unit_type[2,7] = obj_p7_unit_workhorse;
global.obj_unit_type[2,8] = obj_p8_unit_workhorse;
global.obj_unit_type[2,9] = obj_p9_unit_workhorse;

//obj_p#_unit_attackhorse

global.obj_unit_type[3,0] = obj_p0_unit_atkhorse;
global.obj_unit_type[3,1] = obj_p1_unit_atkhorse;
global.obj_unit_type[3,2] = obj_p2_unit_atkhorse;
global.obj_unit_type[3,3] = obj_p3_unit_atkhorse;
global.obj_unit_type[3,4] = obj_p4_unit_atkhorse;
global.obj_unit_type[3,5] = obj_p5_unit_atkhorse;
global.obj_unit_type[3,6] = obj_p6_unit_atkhorse;
global.obj_unit_type[3,7] = obj_p7_unit_atkhorse;
global.obj_unit_type[3,8] = obj_p8_unit_atkhorse;
global.obj_unit_type[3,9] = obj_p9_unit_atkhorse;

//obj_p#_unit_rangedhorse

global.obj_unit_type[4,0] = obj_p0_unit_rangedhorse;
global.obj_unit_type[4,1] = obj_p1_unit_rangedhorse;
global.obj_unit_type[4,2] = obj_p2_unit_rangedhorse;
global.obj_unit_type[4,3] = obj_p3_unit_rangedhorse;
global.obj_unit_type[4,4] = obj_p4_unit_rangedhorse;
global.obj_unit_type[4,5] = obj_p5_unit_rangedhorse;
global.obj_unit_type[4,6] = obj_p6_unit_rangedhorse;
global.obj_unit_type[4,7] = obj_p7_unit_rangedhorse;
global.obj_unit_type[4,8] = obj_p8_unit_rangedhorse;
global.obj_unit_type[4,9] = obj_p9_unit_rangedhorse;

//obj_p#_unit_heavyhorse

global.obj_unit_type[5,0] = obj_p0_unit_heavyhorse;
global.obj_unit_type[5,1] = obj_p1_unit_heavyhorse;
global.obj_unit_type[5,2] = obj_p2_unit_heavyhorse;
global.obj_unit_type[5,3] = obj_p3_unit_heavyhorse;
global.obj_unit_type[5,4] = obj_p4_unit_heavyhorse;
global.obj_unit_type[5,5] = obj_p5_unit_heavyhorse;
global.obj_unit_type[5,6] = obj_p6_unit_heavyhorse;
global.obj_unit_type[5,7] = obj_p7_unit_heavyhorse;
global.obj_unit_type[5,8] = obj_p8_unit_heavyhorse;
global.obj_unit_type[5,9] = obj_p9_unit_heavyhorse;

// buildings
// obj_p#_building_parent
global.obj_building_type[0,0] = obj_p0_building_parent;
global.obj_building_type[0,1] = obj_p1_building_parent;
global.obj_building_type[0,2] = obj_p2_building_parent;
global.obj_building_type[0,3] = obj_p3_building_parent;
global.obj_building_type[0,4] = obj_p4_building_parent;
global.obj_building_type[0,5] = obj_p5_building_parent;
global.obj_building_type[0,6] = obj_p6_building_parent;
global.obj_building_type[0,7] = obj_p7_building_parent;
global.obj_building_type[0,8] = obj_p8_building_parent;
global.obj_building_type[0,9] = obj_p9_building_parent;

// obj_p#_building_example
global.obj_building_type[1,0] = obj_p0_building_example;
global.obj_building_type[1,1] = obj_p1_building_example;
global.obj_building_type[1,2] = obj_p2_building_example;
global.obj_building_type[1,3] = obj_p3_building_example;
global.obj_building_type[1,4] = obj_p4_building_example;
global.obj_building_type[1,5] = obj_p5_building_example;
global.obj_building_type[1,6] = obj_p6_building_example;
global.obj_building_type[1,7] = obj_p7_building_example;
global.obj_building_type[1,8] = obj_p8_building_example;
global.obj_building_type[1,9] = obj_p9_building_example;

// obj_p#_building_headquarters
global.obj_building_type[2,0] = obj_p0_building_headquarters;
global.obj_building_type[2,1] = obj_p1_building_headquarters;
global.obj_building_type[2,2] = obj_p2_building_headquarters;
global.obj_building_type[2,3] = obj_p3_building_headquarters;
global.obj_building_type[2,4] = obj_p4_building_headquarters;
global.obj_building_type[2,5] = obj_p5_building_headquarters;
global.obj_building_type[2,6] = obj_p6_building_headquarters;
global.obj_building_type[2,7] = obj_p7_building_headquarters;
global.obj_building_type[2,8] = obj_p8_building_headquarters;
global.obj_building_type[2,9] = obj_p9_building_headquarters;

// obj_p#_building_barracks

global.obj_building_type[3,0] = obj_p0_building_barracks;
global.obj_building_type[3,1] = obj_p1_building_barracks;
global.obj_building_type[3,2] = obj_p2_building_barracks;
global.obj_building_type[3,3] = obj_p3_building_barracks;
global.obj_building_type[3,4] = obj_p4_building_barracks;
global.obj_building_type[3,5] = obj_p5_building_barracks;
global.obj_building_type[3,6] = obj_p6_building_barracks;
global.obj_building_type[3,7] = obj_p7_building_barracks;
global.obj_building_type[3,8] = obj_p8_building_barracks;
global.obj_building_type[3,9] = obj_p9_building_barracks;

// obj_p#_building_forge

global.obj_building_type[4,0] = obj_p0_building_forge;
global.obj_building_type[4,1] = obj_p1_building_forge;
global.obj_building_type[4,2] = obj_p2_building_forge;
global.obj_building_type[4,3] = obj_p3_building_forge;
global.obj_building_type[4,4] = obj_p4_building_forge;
global.obj_building_type[4,5] = obj_p5_building_forge;
global.obj_building_type[4,6] = obj_p6_building_forge;
global.obj_building_type[4,7] = obj_p7_building_forge;
global.obj_building_type[4,8] = obj_p8_building_forge;
global.obj_building_type[4,9] = obj_p9_building_forge;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// try join host
if (global.ClientState==0)
{
    global.ServerSocket = tcp_connect(global.ServerAddr,global.ServerPort);
    socket_sendbuffer_limit(global.ServerSocket, 65536);
    // send name
    write_ushort(global.ServerSocket,113); // message header: update name
    write_ubyte(global.ServerSocket,string_length(global.ClientName)); // name lenbg
    write_string(global.ServerSocket,global.ClientName); // name
    socket_send(global.ServerSocket);
    
    global.ClientState = 1; // connected and waiting for server start
}
else if (global.ClientState==1)
{
    // create lobby chat
    if (!instance_exists(obj_lobby_chat)) instance_create(0,0,obj_lobby_chat);
    
    // check for connection error
    if(socket_has_error(global.ServerSocket)) {
        show_message("Lost connection to the client: "+socket_error(global.ServerSocket));
        game_end();
    }
    
    // check alive
    timer1 += 1;
    if (timer1 &gt; timer1len)
    {
        write_ushort(global.ServerSocket,0);
        //socket_send(global.ServerSocket);
    }
    
    // change team and color and race
    if (keyboard_check_pressed(vk_up))
    {
        write_ushort(global.ServerSocket,111); // message header: change team
        write_ubyte(global.ServerSocket,0); // up pressed
    }
    else if (keyboard_check_pressed(vk_down))
    {
        write_ushort(global.ServerSocket,111); // message header: change team
        write_ubyte(global.ServerSocket,1); // down pressed
    }
    else if (keyboard_check_pressed(vk_left))
    {
        write_ushort(global.ServerSocket,112); // message header: change color
        write_ubyte(global.ServerSocket,0); // left pressed
    }
    else if (keyboard_check_pressed(vk_right))
    {
        write_ushort(global.ServerSocket,112); // message header: change color
        write_ubyte(global.ServerSocket,1); // right pressed
    }
    else if (keyboard_check_pressed(vk_control)) // change race
    {
        write_ushort(global.ServerSocket,115); // message header: change race
        write_ubyte(global.ServerSocket,0); // some rubbish
    }
    //start game
    else
    if (global.isHost)
    {
        if (keyboard_check_pressed(vk_end)) // start game
        {
            write_ushort(global.ServerSocket,101); // message header: signal game start
            write_ubyte(global.ServerSocket,0); // ignore
        }
        else if (keyboard_check_pressed(vk_pageup)) // change level
        {
            write_ushort(global.ServerSocket,114); // message header: change color
            write_ubyte(global.ServerSocket,0); // pg up pressed
        }
        else if (keyboard_check_pressed(vk_pagedown)) // change level
        {
            write_ushort(global.ServerSocket,114); // message header: change color
            write_ubyte(global.ServerSocket,1); // pg up pressed
        }
    }
    
    // receive any sever messages
    if(tcp_receive_available(global.ServerSocket)&gt;2)
    {
        scr_msgHandler(read_ushort(global.ServerSocket),global.ServerSocket);
    }
    
    // send any messages
    socket_send(global.ServerSocket);
}
else if (global.ClientState==8)
{
    // check for connection error
    if(socket_has_error(global.ServerSocket)) {
        show_message("Lost connection to the client: "+socket_error(global.ServerSocket));
        game_end();
    }
    
    // recieve and handle messages
    if (tcp_receive_available(global.ServerSocket)&gt;2)
    {
        scr_msgHandler(read_ushort(global.ServerSocket),global.ServerSocket);
    }
    
    // initialize network id's
    if (netid_initialization==false)
    {
        with(global.obj_unit_type[0,global.PlayerId]) // for all owned units
        {
            write_ushort(global.ServerSocket,800); // message header: initialize net id
            write_uint(global.ServerSocket,self.id); // unit id
        }
        
        with(global.obj_building_type[0,global.PlayerId]) // for all owned buildings
        {
            write_ushort(global.ServerSocket,800); // message header: initialize net id
            write_uint(global.ServerSocket,self.id); // building id
        }
    
        netid_initialization = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ClientState==8)
{
    //send anything in the socket
    tmp_sockSize = max(socket_sendbuffer_size(global.ServerSocket),tmp_sockSize); //getting socket size for DEBUGGING 
    socket_send(global.ServerSocket); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ALL FOR DEBUGGING
//temp
/*draw_text(100,100,global.ClientState);
draw_text(400,20,string(mouse_x)+","+string(mouse_y));

//send socket length
if (global.ClientState==8)
{
    draw_text(view_xview[0]+300,view_yview[0]+200,"client"+string(global.PlayerId)+" to server: "+string(tmp_sockSize));
}*/

// check is host
//if (global.isHost) { draw_text(lobby_infox+400,lobby_infoy,"(HOST)"); }

if (global.ClientState==1) // draw lobby information
{
    // boxes
    draw_set_color(c_gray);
    draw_set_alpha(0.6);
    draw_rectangle(lobby_infox,lobby_infoy,lobby_infox+350,lobby_infoy+230,false);
    draw_set_color(c_navy);
    draw_set_alpha(1);
    draw_rectangle(lobby_infox,lobby_infoy,lobby_infox+350,lobby_infoy+230,true);
    
    // titles
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_text(3+lobby_infox,3+lobby_infoy,"Players Connected:");
    draw_text(3+lobby_infox+170,3+lobby_infoy,"Race:"); // not used at the moment
    draw_text(3+lobby_infox+240,3+lobby_infoy,"Team:");
    draw_text(3+lobby_infox+300,3+lobby_infoy,"Color:");
    
    // loby info
    for (i=0;i&lt;lobby_p_count;i+=1)
    {
        draw_set_alpha(1);
        draw_set_color(c_black);
        draw_text(3+lobby_infox,3+lobby_infoy+30+(i*20),lobby_p_name[i]);
        draw_text(3+lobby_infox+167,3+lobby_infoy+30+(i*20),lobby_p_race[i]); // not used at the moment
        draw_text(3+lobby_infox+260,3+lobby_infoy+30+(i*20),lobby_p_team[i]);
        draw_set_color(lobby_p_color[i]);
        draw_rectangle(3+lobby_infox+307,3+lobby_infoy+30+2+(i*20),3+lobby_infox+327,3+lobby_infoy+30+16+(i*20),false);
    }
    // map name
    draw_set_alpha(1);
    draw_set_color(c_black);
    draw_text(lobby_infox+355,3+lobby_infoy+30+(9*20),"Map:");
    draw_set_color(c_blue);
    draw_text(lobby_infox+355+2+string_width("Map:"),3+lobby_infoy+30+(9*20),lobby_map_name);
    
    // lobby controls
    draw_set_color(c_black);
    draw_text_ext(381,35,"(&lt;Up&gt; and &lt;Down&gt; changes teams. &lt;Left&gt; and &lt;Right&gt; changes color. &lt;Ctrl&gt; cycles through different races)",-1,210);
    if (global.isHost) { draw_text_ext(381,125,"(&lt;Pg Up&gt; and &lt;Pg Dn&gt; changes map. Press &lt;End&gt; to start the game.)",-1,210); }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

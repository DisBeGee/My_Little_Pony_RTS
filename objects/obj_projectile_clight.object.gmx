<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_projectile_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>target = 99;
targetx = 99;
targety = 99;
ownerx = 99;
ownery = 99;
damage = 99;
damage_dealt = false
owner = 99;
prev_owner = -1;
life = 10;
chain_range = 150; //range of bouncing chains
thickness = 3;
chained = false;
chain_count = 15; //how many times this can chain
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (damage_dealt==false)
{
    if instance_exists(target)
    {
        target.unit_hp -= damage;
    }
    damage_dealt = true;
    alarm[0] = 2;
}
else if (chained==false)
{
    //chain - start
    chain_count -= 1;
    if (chain_count&gt;0)
    {
        instance_deactivate_object(target);
        instance_deactivate_object(prev_owner);
        next_target = instance_nearest(targetx, targety, obj_enem_parent);
        instance_activate_object(target);
        instance_activate_object(prev_owner);
        if (point_distance(next_target.x, next_target.y, targetx, targety)&lt;chain_range)
        {
            newchain = instance_create(-100, -100, obj_projectile_clight);
            newchain.target = next_target;
            newchain.chain_count = chain_count;
            newchain.damage = damage;
            newchain.prev_owner = target;
            if (instance_exists(target))
            {
                newchain.owner = target;
            }
            else
            {
                newchain.ownerx = targetx;
                newchain.ownery = targety;
            }
        }
    }
    //chain - end
    chained = true
    alarm[0] = 6
}
else
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>life -= 1;

if (instance_exists(target))
{
    targetx = target.x;
    targety = target.y;
}

if (instance_exists(owner))
{
    ownerx = owner.x;
    ownery = owner.y;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_blue);
if (life&lt;=5)
{
    draw_set_alpha(life/5);
}
draw_line_width(ownerx, ownery, targetx, targety, thickness);</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// setup //
/*var*/ xpos = 99;
/*var*/ ypos = 99;
/*var*/ active = false
/*var*/ //spr_but_up = spr_button_fireball1;
/*var*/ //spr_but_down = spr_button_fireball2;
/*var*/ //spr_but_inact = spr_button_fireball3;
/*var*/ spr_state = 0; // 0 = up, 1 = down, 2 = inactive, you can add more if you want

// Spell setup //
/*var*/ //spell_name = "Spell 1"; //name of the spell
/*var*/ //spell_casttype = 0; //0 = projectile, 1 = unit target, 2 = free target, 3 = toggle/activate
/*var*/ //spell_targettype = 0; //for targetted spells - 0 is enemy units, 1 is ally units, 2 is both
/*var*/ //spell_range = 600; //range of the spell
/*var*/ //spell_cooldown = 100; //how often the spell can be cast
/*var*/ //spell_cost = 0; //how much the spell costs
/*var*/ //spell_object = obj_projectile_fireball; //this is the projectile or object that the  spell will summon
/*var*/ //spell_damage = 30; //damage of spell, if any
/*var*/ //spell_casttime = 10; //how long it takes before this spell is cast
/*var*/ //spell_proj_speed = 100; //how fast the projectile is
/*var*/ //spell_proj_aoe = 50; //aoe range of spell
/*var*/ 
/*var*/ spell_cd_spr = spr_button_cooldown_timer4; //icon for the cooldown timer
/*var*/ spell_cd_length = 61; //number of images in the cd timer sprite
/*var*/ spell_cd_x = 28; //xpos of the cd timer
/*var*/ spell_cd_y = 14; //ypos of the cd timer
/*var*/ 
/*var*/ //spell_mess_cd = "Ability is on cooldown"; //message for when the ability is on cooldown
/*var*/ //spell_mess_unavail = "Ability is unavailable"; //message for when the ability id unabvailable
/*var*/ 
/*var*/ //spell_code = "temp_proj=instance_create(x,y,cast_object);temp_proj.damage = cast_damage;temp_proj.targetx = cast_targetx;temp_proj.targety = cast_targety;temp_proj.aoe = cast_proj_aoe;hud_button_cooldown_index[cast_button_index]=cast_cooldown;";

//hotkey system
/*var*/ //hotkey = "T" //the hotkey that this button is assigned to. NOTE: make sure it is a capital letter, lowercase does not work
/*var*/ 

// Get button index from unit
/*var*/ spell_button_index = -1;
got_inex = false; //for debugging
{
    if (object_index==obj_HUD.target.hud_gen_s1){spell_button_index = 0;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s2){spell_button_index = 1;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s3){spell_button_index = 2;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s4){spell_button_index = 3;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s5){spell_button_index = 4;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s6){spell_button_index = 5;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s7){spell_button_index = 6;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s8){spell_button_index = 7;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s9){spell_button_index = 8;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s10){spell_button_index =9;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s11){spell_button_index = 10;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s12){spell_button_index = 11;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s13){spell_button_index = 12;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s14){spell_button_index = 13;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s15){spell_button_index = 14;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s16){spell_button_index = 15;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s17){spell_button_index = 16;got_index=true;}
    else if (object_index==obj_HUD.target.hud_gen_s18){spell_button_index = 17;got_index=true;}
    else if (got_index==false){show_message("error - failed to get index for button");}
}

/*
temp_proj=instance_create(x,y,cast_object);
temp_proj.damage = cast_damage;
temp_proj.targetx = cast_targetx;
temp_proj.targety = cast_targety;
temp_proj.aoe = cast_proj_aoe;
hud_button_cooldown_index[cast_button_index]=cast_cooldown;
*/

//tooltip system
/*var*/ //text[0] = ""
/*var*/ //text[1] = ""
/*var*/ //text[2] = ""
/*var*/ //text[3] = ""
/*var*/ //text[4] = ""
/*var*/ //text_used = 0
/*var*/ mouse_over = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_state = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// activate tooltip
if (mouse_over)
{
    obj_tooltip_manager.text[0] = text[0];
    obj_tooltip_manager.text[1] = text[1];
    obj_tooltip_manager.text[2] = text[2];
    obj_tooltip_manager.text[3] = text[3];
    obj_tooltip_manager.text[4] = text[4];
    obj_tooltip_manager.text_used = text_used;
    obj_tooltip_manager.active = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//button positioning - start
x = view_xview[0]+xpos;
y = view_yview[0]+ypos;
//button positioning end

//hotkey system
if (keyboard_check_pressed(ord(hotkey)))
{
    //copy ALL the code you have in the left press event into this space
    //If unit is scilenced - start
    if (obj_HUD.target.scilenced==false&amp;&amp;obj_HUD.target.stunned==false)
    {



    //check cooldown timer - start
    if ((obj_HUD.target.hud_button_cooldown_index[spell_button_index])&lt;=0)
    {

    //clicking effect - start
    spr_state = 1;
    alarm[0] = 1;
    //clicking effect - end

    //your own code to what happens when you press this button
    //transfer all the spell information to unit - start
    obj_HUD.target.cast_range = spell_range;
    obj_HUD.target.cast_cooldown = spell_cooldown;
    obj_HUD.target.cast_type = spell_casttype;
    obj_HUD.target.cast_targettype = spell_targettype;
    obj_HUD.target.cast_damage = spell_damage;
    obj_HUD.target.cast_target_object = 99;
    obj_HUD.target.cast_targetx = 99;
    obj_HUD.target.cast_targety = 99;
    obj_HUD.target.cast_object = spell_object;
    obj_HUD.target.cast_cost = spell_cost;
    obj_HUD.target.cast_spellname = spell_name;
    obj_HUD.target.cast_time = spell_casttime;
    obj_HUD.target.cast_proj_speed = spell_proj_speed;
    obj_HUD.target.cast_proj_aoe = spell_proj_aoe;
    obj_HUD.target.cast_code = spell_code;
    obj_HUD.target.cast_button_index = spell_button_index;
    //transfer all the spell information to unit - end

    // Cast spell - start
    // You don't actually hace to touch any of this stuff :D lucky you!!
    switch (spell_casttype)
    {
        case 0:
        {
            //insert your code here
            if (!(instance_exists(obj_curs_cast)))
            {
                temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
                temp_curs.casttype = spell_casttype;
                temp_curs.targettype = spell_targettype;
                temp_curs.spell_cost = spell_cost;
                temp_curs.range = spell_range;
                temp_curs.owner = obj_HUD.target;
            }
        } break ;
        case 1:
        {
            //insert your code here
            if (!(instance_exists(obj_curs_cast)))
            {
                temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
                temp_curs.casttype = spell_casttype;
                temp_curs.targettype = spell_targettype;
                temp_curs.spell_cost = spell_cost;
                temp_curs.range = spell_range;
                temp_curs.owner = obj_HUD.target;
            }
        } break ;
        case 2:
        {
            //insert you code here
            if (!(instance_exists(obj_curs_cast)))
            {
                temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
                temp_curs.casttype = spell_casttype;
                temp_curs.targettype = spell_targettype;
                temp_curs.spell_cost = spell_cost;
                temp_curs.range = spell_range;
                temp_curs.owner = obj_HUD.target;
            }
        } break ;
        case 3:
        {
            //insert your code here
            if (!(instance_exists(obj_curs_cast)))
            {
                obj_HUD.target.cast = true;
            }
        } break ;
    }
    // Cast spell - end

    //check cooldown timer - end
    }
    else
    {
        obj_message_system.message_recieved = spell_mess_cd;
    }


    //If unit is scilenced - end
    }
    else
    {
        obj_message_system.message_recieved = spell_mess_unavail;
    }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_over = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_over = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If unit is scilenced - start
if (obj_HUD.target.scilenced==false&amp;&amp;obj_HUD.target.stunned==false)
{



//check cooldown timer - start
if ((obj_HUD.target.hud_button_cooldown_index[spell_button_index])&lt;=0)
{

//clicking effect - start
spr_state = 1;
alarm[0] = 1;
//clicking effect - end

//your own code to what happens when you press this button
//transfer all the spell information to unit - start
obj_HUD.target.cast_range = spell_range;
obj_HUD.target.cast_cooldown = spell_cooldown;
obj_HUD.target.cast_type = spell_casttype;
obj_HUD.target.cast_targettype = spell_targettype;
obj_HUD.target.cast_damage = spell_damage;
obj_HUD.target.cast_target_object = 99;
obj_HUD.target.cast_targetx = 99;
obj_HUD.target.cast_targety = 99;
obj_HUD.target.cast_object = spell_object;
obj_HUD.target.cast_cost = spell_cost;
obj_HUD.target.cast_spellname = spell_name;
obj_HUD.target.cast_time = spell_casttime;
obj_HUD.target.cast_proj_speed = spell_proj_speed;
obj_HUD.target.cast_proj_aoe = spell_proj_aoe;
obj_HUD.target.cast_code = spell_code;
obj_HUD.target.cast_button_index = spell_button_index;
//transfer all the spell information to unit - end

// Cast spell - start
// You don't actually hace to touch any of this stuff :D lucky you!!
switch (spell_casttype)
{
    case 0:
    {
        //insert your code here
        if (!(instance_exists(obj_curs_cast)))
        {
            temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
            temp_curs.casttype = spell_casttype;
            temp_curs.targettype = spell_targettype;
            temp_curs.spell_cost = spell_cost;
            temp_curs.range = spell_range;
            temp_curs.owner = obj_HUD.target;
        }
    } break ;
    case 1:
    {
        //insert your code here
        if (!(instance_exists(obj_curs_cast)))
        {
            temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
            temp_curs.casttype = spell_casttype;
            temp_curs.targettype = spell_targettype;
            temp_curs.spell_cost = spell_cost;
            temp_curs.range = spell_range;
            temp_curs.owner = obj_HUD.target;
        }
    } break ;
    case 2:
    {
        //insert you code here
        if (!(instance_exists(obj_curs_cast)))
        {
            temp_curs = instance_create(mouse_x, mouse_y, obj_curs_cast);
            temp_curs.casttype = spell_casttype;
            temp_curs.targettype = spell_targettype;
            temp_curs.spell_cost = spell_cost;
            temp_curs.range = spell_range;
            temp_curs.owner = obj_HUD.target;
        }
    } break ;
    case 3:
    {
        //insert your code here
        if (!(instance_exists(obj_curs_cast)))
        {
            obj_HUD.target.cast = true;
        }
    } break ;
}
// Cast spell - end

//check cooldown timer - end
}
else
{
    obj_message_system.message_recieved = spell_mess_cd;
}


//If unit is scilenced - end
}
else
{
    obj_message_system.message_recieved = spell_mess_unavail;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(obj_HUD.target))
{
    //drawing the button - start
    if (obj_HUD.target.scilenced==true||obj_HUD.target.stunned==true)
    {
        draw_sprite(spr_but_inact,-1,view_xview[0]+xpos,view_yview[0]+ypos);
    }
    else
    {
        switch (spr_state)
        {
            case 0:
                draw_sprite(spr_but_up,-1,view_xview[0]+xpos,view_yview[0]+ypos)
            break;
    
            case 1:
                draw_sprite(spr_but_down,-1,view_xview[0]+xpos,view_yview[0]+ypos)
            break;
    
            case 2:
                draw_sprite(spr_but_inact,-1,view_xview[0]+xpos,view_yview[0]+ypos)
            break;
        }
    }
    if ((obj_HUD.target.hud_button_cooldown_index[spell_button_index])&gt;0) //draw the cooldown timer
    {
        spr_index = spell_cd_length-ceil(spell_cd_length*(obj_HUD.target.hud_button_cooldown_index[spell_button_index]/spell_cooldown));
        draw_sprite(spell_cd_spr, spr_index, view_xview[0]+xpos+spell_cd_x, view_yview[0]+ypos+spell_cd_y);
    }
    //drawing the button - end
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

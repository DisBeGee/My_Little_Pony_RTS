<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Server Variables
//global.PlayerCount = 0; //number of players connected to the server
//global.ServerState = 0; //0 = waiting for connections, 8 = playing game
//global.PlayerMax = 10; //max amount of players that can connect

//Server Address
acceptor = tcp_listen(12345);
if(socket_has_error(acceptor)) {
    show_message("Unable to start server: "+socket_error(acceptor));
    game_end();
}

//Network Id's
netId_counter = 1;

//State 0 Variables
timer0len = 30;
timer0 = 0;

temp = false;

//clear sockets??
//for (q=0;q&lt;global.PlayerCount;q+=1)
//{
//    tcp_receive_available(global.player_socket[q]);
//    tcp_receive_available(global.player_socket[q]);
//}

//DEBUGGING
for (i=0;i&lt;global.PlayerMax;i+=1)
{
    tmp_sockSize[i] = 0;
}

// player information held in server:
//player_socket[] #index is same as player id
//player_name[]
//player_race[] #not yet
//player_team[]
//player_color[]

// Player Colors
num_colors = 10;

color_list[0] = c_blue;
color_list[1] = c_fuchsia;
color_list[2] = c_green;
color_list[3] = c_maroon;
color_list[4] = c_navy;
color_list[5] = c_olive;
color_list[6] = c_orange;
color_list[7] = c_purple;
color_list[8] = c_teal;
color_list[9] = c_yellow;
color_avail[0] = true;
color_avail[1] = true;
color_avail[2] = true;
color_avail[3] = true;
color_avail[4] = true;
color_avail[5] = true;
color_avail[6] = true;
color_avail[7] = true;
color_avail[8] = true;
color_avail[9] = true;

// Races/Factions
num_races = 4;

race_name[0] = "Human"; // just examples
race_name[1] = "Orc";
race_name[2] = "Elf";
race_name[3] = "Undead";

// Multiplayer maps
map_index = 0;
num_maps = 1;

map_list[0] = rm_multi_play5_81;
map_name[0] = "Steppes of War";

/*
map_list[0] = rm_multi_play;
map_list[1] = rm_multi_play2;
map_list[2] = rm_multi_play3;
map_list[3] = rm_multi_play4;
map_list[4] = rm_multi_play5;
map_list[5] = rm_multi_play5_81;

map_name[0] = "Example map";
map_name[1] = "Example map 2 (Bigger)";
map_name[2] = "Example map 3 (10 Plyr Test)";
map_name[3] = "Example map 4 HUGEASSMOFO";
map_name[4] = "Example map Steppes of War";
map_name[5] = "Example map Steppes Of War 8.1";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.ServerState==0)
{
    // acctept connections
    if (global.PlayerCount &lt; global.PlayerMax)
    {
        tempSocket = socket_accept(acceptor);
        if (tempSocket &gt; 0)
        {
            //add player to connection
            tempPId = global.PlayerCount;
            global.player_socket[tempPId] = tempSocket;
            socket_sendbuffer_limit(global.player_socket[tempPId], 65536);
            //get name NOT
            global.player_name[tempPId] = "Player connecting...,";
            global.player_race[tempPId] = 0; // setting race
            
            global.player_team[tempPId] = 1; // set team
            for (i=0;i&lt;num_colors;i+=1) //set color;
            {
                if (color_avail[i])
                {
                    global.player_color[tempPId] = color_list[i];
                    color_avail[i] = false;
                    color_index[tempPId] = i;
                    break;
                }
            }
            
            global.PlayerCount += 1;
        }
    }
    
    // detect disconnections
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        if socket_has_error(global.player_socket[i])
        {
            // free color
            color_avail[color_index[i]] = true;
        
            for (j=i;j&lt;(global.PlayerCount-1);j+=1)
            {
                global.player_socket[j] = global.player_socket[j+1];
                global.player_name[j] = global.player_name[j+1];
                global.player_team[j] = global.player_team[j+1];
                global.player_color[j] = global.player_color[j+1];
                global.player_race[j] = global.player_race[j+1];
                color_index[j] = color_index[j+1];
            }
            
            global.PlayerCount -= 1;
        }
    }
    
    // send lobby info
    //timer0 += 1;
    //if (timer0 &gt; timer0len)
    //{
        for (i=0;i&lt;global.PlayerCount;i+=1)
        {
            write_ushort(global.player_socket[i],110); // message header: update lobby info
            write_ubyte(global.player_socket[i],global.PlayerCount); // number of players so far
            for (w=0;w&lt;global.PlayerCount;w+=1)
            {
                write_ubyte(global.player_socket[i],string_length(global.player_name[w])) ;// name len
                write_string(global.player_socket[i],global.player_name[w]); // name
                write_ubyte(global.player_socket[i],global.player_team[w]); // team
                write_uint(global.player_socket[i],global.player_color[w]); // color
                write_ubyte(global.player_socket[i],string_length(race_name[global.player_race[w]])) // race len
                write_string(global.player_socket[i],race_name[global.player_race[w]]); // race
            }
            
            write_ubyte(global.player_socket[i],string_length(map_name[map_index])); // map name length
            write_string(global.player_socket[i],map_name[map_index]); // map name
        }
    //    timer0 = 0;
    //}
    
    // receive client messages (generic recieve message)
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        if (tcp_receive_available(global.player_socket[i])&gt;2)
        {
            scr_msgHandler(read_ushort(global.player_socket[i]),global.player_socket[i]);
        }
    }
    
    // start game
    //if (keyboard_check(vk_space))
    
    // send messages if needed
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        if (socket_sendbuffer_size(global.player_socket[i])&gt;0)
        {  
            socket_send(global.player_socket[i]);
        }
    }
}
else if (global.ServerState==8)
{
    // recieve any message from client (generic message handling)
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        if (tcp_receive_available(global.player_socket[i])&gt;2)
        {
            scr_msgHandler(read_ushort(global.player_socket[i]),global.player_socket[i]);
        }
    }


    // send messages if needed
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        tmp_sockSize[i] = max(socket_sendbuffer_size(global.player_socket[i]),tmp_sockSize[i]); //getting socket size for DEBUGGINH
        if (socket_sendbuffer_size(global.player_socket[i])&gt;0)
        {  
            socket_send(global.player_socket[i]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// ALL FOR DEBUGGING
//temp
/*if (global.ServerState==0)
{
    draw_text(200,300-60,"Waiting for connections (press space to start)");

    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        draw_text(200,300+(i*30),global.player_name[i]+" is connected. Team: "+string(global.player_team[i])+" .Color: "+string(color_index[i]));
    }
}

//send socket length
if (global.ServerState==8)
{
    for (i=0;i&lt;global.PlayerCount;i+=1)
    {
        draw_text(view_xview[0]+300,view_yview[0]+120+(20*i),"server to client"+string(i)+": "+string(tmp_sockSize[i]));
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

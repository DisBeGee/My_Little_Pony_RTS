<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_house_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_building_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// - setup - //
/*var*/ //area_size = 30; //this is used for resource gathering - pretty much the size of the radius of th building
/*var*/ is_built = true; // if the structure has been fully built NOTE: SET TO FALSE IF CREATED FROM BUTTON
/*var*/ is_placed = true; // if the structure has been placed on the ground NOTE: SET TO FALSE IF CREATED FROM BUTTON
/*var*/ place_yes = false; // if the area is clear for the building to be built on
/*var*/ place_x = 0; //where it is going to be placed
/*var*/ place_y = 0; //where it is going to be placed
/*var*/ selected = false;
/*var*/ //selectcx1 = -14; // the folllowing are the co-ordinates for the select circle
/*var*/ //selectcx2 = 14;
/*var*/ //selectcy1 = 5;
/*var*/ //selectcy2 = 17;
/*var*/ builder = false; //if the building can make cars or units
/*var*/ //unit_pic = spr_man_pic; // the pic for the unit on the hud
/*var*/ building_depth = 0;
/*var*/ build_range = 250; // how far you can build from the closest ally
/*var*/ 
// - graphics - //
/*var*/ //g_build_yes = spr_house_y;
/*var*/ //g_build_no = spr_house_n;
/*var*/ //g_building = spr_house_building;
/*var*/ //g_built = spr_house_done;
/*var*/ //g_build_num = 4; //number of sprites in the building animation
/*var*/ 
// - building stats - //
/*var*/ //unit_name = "temper to go"; 
/*var*/ //unit_hp_max = 1000;
/*var*/ //unit_hp = 1000;
/*var*/ 
/*var*/ 
/*var*/ 
// - building of structure - //
/*var*/ //build_time = 300; //how long it takes to build
/*var*/ build_progress = 0; //how much of it has been built
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/* - Making Units - */
/*var*/ can_make = true; //if the building can make units or research tech
/*var*/ make_progress = 0;
/*var*/ make_limit = 1000;
/*var*/ make_power = 99; // how fast it can make the unit
/*var*/ make_object = 99; //what is going to be made - unit/research
/*var*/ make_time = false; //if there is at least 1 unit in building que
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/*var*/ 
/* - Waypointing - */
/*var*/ //def_waypointposx = 0; // these values are relative to buildings position
/*var*/ //def_waypointposy = 40; // these values are relative to buildings position
/*var*/ waypointx = x+0;
/*var*/ waypointy = y+40;
/*var*/ def_waypointx = 0;
/*var*/ def_waypointy = 0;
/*var*/ //waypoint_spr = spr_house_waypoint;
/*var*/ waypoint_depth = 0;
/*var*/ 
/* - HUD - */
/*var*/ //hud_gen_s1 = obj_unit1_template;
/*var*/ //hud_gen_s2 = 99;
/*var*/ //hud_gen_s3 = 99;
/*var*/ //hud_gen_s4 = 99;
/*var*/ //hud_gen_s5 = 99;
/*var*/ //hud_gen_s6 = 99;
/*var*/ //hud_gen_s7 = 99;
/*var*/ //hud_gen_s8 = 99;
/*var*/ //hud_gen_s9 = 99;
/*var*/ //hud_gen_s10 = 99;
/*var*/ //hud_gen_s11 = 99;
/*var*/ //hud_gen_s12 = 99;
/*var*/ //hud_gen_s13 = 99;
/*var*/ //hud_gen_s14 = 99;
/*var*/ //hud_gen_s15 = 99;
/*var*/ //hud_gen_s16 = 99;
/*var*/ //hud_gen_s17 = 99;
/*var*/ //hud_gen_s18 = 99;
/*var*/ //hud_build_s1 = 99;
/*var*/ //hud_build_s2 = 99;
/*var*/ //hud_build_s3 = 99;
/*var*/ //hud_build_s4 = 99;
/*var*/ //hud_build_s5 = 99;
/*var*/ //hud_build_s6 = 99;
/*var*/ //hud_build_s7 = 99;
/*var*/ //hud_build_s8 = 99;
/*var*/ //hud_build_s9 = 99;
/*var*/ //hud_build_s10 = 99;
/*var*/ //hud_build_s11 = 99;
/*var*/ //hud_build_s12 = 99;
/*var*/ //hud_build_s13 = 99;
/*var*/ //hud_build_s14 = 99;
/*var*/ //hud_build_s15 = 99;
/*var*/ //hud_build_s16 = 99;
/*var*/ //hud_build_s17 = 99;
/*var*/ //hud_build_s18 = 99;
/* - for HUD - */
/*var*/ is_is_building = true;

// - Build Queue - //
/*var*/ hud_buildq_cur = 99;
/*var*/ hud_buildq_s1 = 99;
/*var*/ hud_buildq_s2 = 99;
/*var*/ hud_buildq_s3 = 99;
/*var*/ hud_buildq_s4 = 99;
/*var*/ hud_buildq_s5 = 99;
/*var*/ hud_buildq_s6 = 99;
/*var*/ buildq_cur = 99; //objects of units
/*var*/ buildq_trans_s1 = 99;
/*var*/ buildq_trans_s2 = 99;
/*var*/ buildq_trans_s3 = 99;
/*var*/ buildq_trans_s4 = 99;
/*var*/ buildq_trans_s5 = 99;
/*var*/ buildq_trans_s6 = 99;
/*var*/ buildq_cur_n = 99; //name of units
/*var*/ buildq_trans_s1_n = 99;
/*var*/ buildq_trans_s2_n = 99;
/*var*/ buildq_trans_s3_n = 99;
/*var*/ buildq_trans_s4_n = 99;
/*var*/ buildq_trans_s5_n = 99;
/*var*/ buildq_trans_s6_n = 99;
/*var*/ buildq_cur_i = 99; //icons of units
/*var*/ buildq_trans_s1_i = 99;
/*var*/ buildq_trans_s2_i = 99;
/*var*/ buildq_trans_s3_i = 99;
/*var*/ buildq_trans_s4_i = 99;
/*var*/ buildq_trans_s5_i = 99;
/*var*/ buildq_trans_s6_i = 99;
/*var*/ buildq_cur_time = 99; // build times of units
/*var*/ buildq_trans_s1_time = 99;
/*var*/ buildq_trans_s2_time = 99;
/*var*/ buildq_trans_s3_time = 99;
/*var*/ buildq_trans_s4_time = 99;
/*var*/ buildq_trans_s5_time = 99;
/*var*/ buildq_trans_s6_time = 99;
/*var*/ buildq_contain = 0;
/*var*/ buildq_max = 6; //include '0' as the one currently being made - so 1 being made plus six in queue
/*var*/ 
/*var*/ 
/*var*/ 
/* - for Health Bar - */
/*var*/ //healthbar_x = -14;
/*var*/ //healthbar_y = -26;
/*var*/ //healthbar_length = 28;
/*var*/ //healthbar_height = 4;
/*var*/ //healthbar_fg_col = c_lime;
/*var*/ //healthbar_bg_col = c_black;
/*var*/ 



/* - Network Code - */
sendRate1 = 1; //original value was 5
send1 = 0;
sendRate2 = 20;
send2 = 0;

prevState = 0;

ownerId = 0; // id of the player that owns this unit
netId = 0; // id of unit, consistent with other clients

depth = -y
/*
if is_placed=true {
    mask_width = bbox_right-bbox_left
    mask_height = bbox_bottom-bbox_top
    //as_map_setrectangle(obj_map.map,bbox_left/64,bbox_top/32,mask_width/64,mask_height/32,-1)
    //as_map_setcell(obj_map.map,x/64,y/32,-1)

    for (i=bbox_left;i&lt;bbox_right;i+=64) {
        for (z=bbox_top;z&lt;bbox_bottom;z+=32) {
        
            if (instance_position(i,z,id) = id) {
            
                as_map_setcell(obj_map.map,i/64,z/32,-1)
            
            }
        }
    }
}
*/

global.placingBuilding = false; //Must be applied to counteract delayed obj_control_ingame bug
cliff_sight = false;

//Determines allegiance of unit: Different for each multiplayer person | Check CONSTANTS for values


hostile_units[0] = "";
hostile_units_num = 0;

for (i=0;i&lt;global.ServerPlyrCnt+1;i+=1) {
    if (global.Player[i] == ALLY) {
        tempstring = "obj_p" + string(i) + "_unit_parent";
        tempobj = asset_get_index(tempstring)
        
        hostile_units[hostile_units_num] = tempobj
        hostile_units_num += 1;
    }
}

ghost_building = -1
able_to_move = false

created_from_unit = false;
building_started = false

unit_creating = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if is_placed=true {
    mask_width = bbox_right-bbox_left
    mask_height = bbox_bottom-bbox_top
    //as_map_setrectangle(obj_map.map,bbox_left/64,bbox_top/32,mask_width/64,mask_height/32,-1)
    //as_map_setcell(obj_map.map,x/64,y/32,-1)

    for (i=bbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
        for (z=bbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
        
            //if (instance_position(i,z,id) = id) {
            position_meeting(i,z,id) {
                as_map_setcell(obj_map.map,i/obj_map.map_col_width,z/obj_map.map_row_height,-1)
            
            }
        }
    }
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fog of War - start


//if (!object_is_ancestor(self.object_index,obj_enem_parent) &amp;&amp; is_built)
if (team != ENEMY &amp;&amp; build_progress &gt; 0)
{

    surface_set_target(global.fog);
    draw_set_blend_mode(bm_subtract);
    draw_set_alpha(1);
    //draw_circle(x/2,y/2,150,0);  
    
    //testing ellipse
    //draw_ellipse((x/2)-300,(y/2)-150,(x/2)+300,(y/2)+150,0); //Divide coords by 2 because no one really knows why just do it
    
    //draw_sprite_ext(FogOfWarSmall,0,x/2,y/2,4,4,0,c_white,1);
    draw_sprite(BuildingFogOfWar,0,x/2,y/2);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();
    
    //Cliff coding
    //if (tile_layer_find(999999,x,y) &gt; 10000) {
    if (cliff_sight) {
        surface_set_target(global.cliff_fog);
        draw_set_blend_mode(bm_subtract);
        draw_set_alpha(1);
        //draw_circle(x/2,y/2,150,0);
        draw_sprite(BuildingFogOfWar,0,x/2,y/2);
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
    }
    
// Fog of War - End


// Fog of War Minimap - Start

    surface_set_target(global.minifog);
    ex = (obj_minimap.length/room_width) * x;
    why = (obj_minimap.height/room_height) * y;
    viewwidth = 500 * (obj_minimap.length/room_width);
    draw_set_blend_mode(bm_subtract);
    draw_set_alpha(1);
    draw_circle(ex,why,viewwidth,false);
    //draw_circle(view_xview[0]+(obj_minimap.xpos+ex),view_yview[0]+(obj_minimap.ypos+why),10,false);
    //draw_sprite(FogOfWar,1,x,y);
    draw_set_blend_mode(bm_normal);
    surface_reset_target();

}

// Fog of War Minimap - End




// Health - start
if (unit_hp  &lt;= 0)// || keyboard_check_pressed(vk_anykey))
{ 
    if selected = true 
    {
        selected = false;
        global.number_of_selected -= 1 ;
    } 
    //death animation here
    instance_create(x,y,obj_explo_2);
    
    //DBG pass collision information to ghost
    if (ghost_building) {
        ghost_building.team = team
        ghost_building.hostile_units_num = hostile_units_num
        ghost_building.hostile_units = hostile_units
        ghost_building.ghost_fog_w = ghost_fog_w
        ghost_building.ghost_fog_h = ghost_fog_h
        ghost_building.building_destroyed = true
    }
    
    //DBG make astar paths available again
    for (i=bbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
        for (z=bbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
        
            //if (instance_position(i,z,id) = id) {
            if position_meeting(i,z,id) {
                as_map_setcell(obj_map.map,i/obj_map.map_col_width,z/obj_map.map_row_height,1)
            
            }
        }
    }
    
    instance_destroy(); 
}
else if (unit_hp &gt; unit_hp_max)
{
    unit_hp = unit_hp_max;
}
// Health - end

//Building placement - start
if (is_built == false)
{
    if build_progress &gt;= build_time
    {
        is_built = true;
        
        alarm[0] = 1;
        
        /* - Network code */
        // send 'is built' message
        write_ushort(global.ServerSocket,20); // message header: broadcast message
        write_ubyte(global.ServerSocket,4); // message size
        write_ushort(global.ServerSocket,1100) // message header: update build status of building
        write_ushort(global.ServerSocket,netId); // net id of building
        
        //if (!object_is_ancestor(self.object_index,obj_enem_parent)) {
        if (team != ENEMY) {
            if (tile_layer_find(999999,x,y) &gt; 10000) {
                followingid = instance_create(x,y,obj_building_cliff);
                followingid.follow = id;
            }
        }   
        

        
        //Set up ASTAR collision
        mask_width = bbox_right-bbox_left
        mask_height = bbox_bottom-bbox_top
        //as_map_setrectangle(obj_map.map,bbox_left/64,bbox_top/32,mask_width/64,mask_height/32,-1)
        //as_map_setcell(obj_map.map,x/64,y/32,-1)
        /*
        for (i=bbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
            for (z=bbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
            
                //if (instance_position(i,z,id) = id) {
                if position_meeting(i,z,id) {
                
                    //One for floor, one for ceiling
                    as_map_setcell(obj_map.map,floor(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
                    as_map_setcell(obj_map.map,ceil(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
                
                }
            }
        }*/
    }
    else if (build_progress &gt; 10) {
        
        //Handles fog of war
        if (collision_point(x,y,EntireCliffs,true,true)) {
            cliff_sight = true;
        }     
    
        for (i=bbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
            for (z=bbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
            
                //if (instance_position(i,z,id) = id) {
                if position_meeting(i,z,id) {
                
                    //One for floor, one for ceiling
                    as_map_setcell(obj_map.map,floor(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
                    as_map_setcell(obj_map.map,ceil(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
                
                }
            }
        }
    }
}

//If building was created through room editor and not through unit
if (!created_from_unit &amp;&amp; is_built &amp;&amp; is_placed) {
    created_from_unit = !created_from_unit
    build_progress = build_time
    building_started = true
    //Handles fog of war
    if (collision_point(x,y,EntireCliffs,true,true)) {
        cliff_sight = true;
    }     
    
    //Set up ASTAR collision
    mask_width = bbox_right-bbox_left
    mask_height = bbox_bottom-bbox_top
    //as_map_setrectangle(obj_map.map,bbox_left/64,bbox_top/32,mask_width/64,mask_height/32,-1)
    //as_map_setcell(obj_map.map,x/64,y/32,-1)

    for (i=bbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
        for (z=bbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
        
            //if (instance_position(i,z,id) = id) {
            if position_meeting(i,z,id) {
                as_map_setcell(obj_map.map,floor(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
                as_map_setcell(obj_map.map,ceil(i/obj_map.map_col_width),z/obj_map.map_row_height,-1)
            }
        }
    }
}


//Building placement - end

//HUD - start
if selected = true &amp;&amp; global.number_of_selected = 1
{
    obj_HUD.target = self.id;
}
//HUD - end

//making units - start
if buildq_cur = 99 &amp;&amp; make_time = true
{
    make_progress = 0;
    make_time = false;
}

if make_time = true
{
    make_progress += make_power;
    
    if make_progress &gt;= make_limit
    {
        make_progress = make_limit;
        //temp = instance_create(x+def_waypointposx,y+def_waypointposy+5,buildq_cur); //temp is for sending them to the waypoint
        //temp.move_x = waypointx;
        //temp.move_y = waypointy;
        //temp.able_to_move = true;
        /* Network - start */
        // send message to create unit
        write_ushort(global.ServerSocket,806); // message header: create unit net id + waypoint
        write_ushort(global.ServerSocket,buildq_cur); // unit type
        write_ubyte(global.ServerSocket,global.PlayerId); // owner
        write_short(global.ServerSocket,x+def_waypointposx); // x create
        write_short(global.ServerSocket,y+def_waypointposy) ;// y create
        write_short(global.ServerSocket,waypointx); // way x
        write_short(global.ServerSocket,waypointy); // way y
        /* Network - start */
        buildq_contain -= 1;
        buildq_cur = 99; 
        make_progress = 0; 
        make_time = false; 

        // build queue for units
        if (buildq_trans_s1 != 99){make_power=buildq_trans_s1_time;buildq_cur=buildq_trans_s1;make_time=true;buildq_cur_n=buildq_trans_s1_n;buildq_cur_i=buildq_trans_s1_i;buildq_trans_s1=99;}
        if (buildq_trans_s2 != 99){buildq_trans_s1=buildq_trans_s2;buildq_trans_s1_time=buildq_trans_s2_time;buildq_trans_s1_n=buildq_trans_s2_n;buildq_trans_s1_i=buildq_trans_s2_i;buildq_trans_s2=99;}
        if (buildq_trans_s3 != 99){buildq_trans_s2=buildq_trans_s3;buildq_trans_s2_time=buildq_trans_s3_time;buildq_trans_s2_n=buildq_trans_s3_n;buildq_trans_s2_i=buildq_trans_s3_i;buildq_trans_s3=99;}
        if (buildq_trans_s4 != 99){buildq_trans_s3=buildq_trans_s4;buildq_trans_s3_time=buildq_trans_s4_time;buildq_trans_s3_n=buildq_trans_s4_n;buildq_trans_s3_i=buildq_trans_s4_i;buildq_trans_s4=99;}
        if (buildq_trans_s5 != 99){buildq_trans_s4=buildq_trans_s5;buildq_trans_s4_time=buildq_trans_s5_time;buildq_trans_s4_n=buildq_trans_s5_n;buildq_trans_s4_i=buildq_trans_s5_i;buildq_trans_s5=99;}
        if (buildq_trans_s6 != 99){buildq_trans_s5=buildq_trans_s6;buildq_trans_s5_time=buildq_trans_s6_time;buildq_trans_s5_n=buildq_trans_s6_n;buildq_trans_s5_i=buildq_trans_s6_i;buildq_trans_s6=99;}
        
        /*  THIS IS OLD CRAP (BACK WHEN THERE WAS NO UNIT QUEUE)
        // if ... what evs - Get the next guy in que and place him as the one to start building - also need to get make_power for that unit
        //else
        //{
          make_object = 99; //should be commented out for now
          make_progress = 0; //should be commented out for now
          make_time = false; //should be commented out for now
        //}
        */
    }
}
//Making units - end

// correcting depth
//if (is_placed==false &amp;&amp; is_built==false) depth=-9000002;

//Ghost building for Fog of War - start

nearest_distance = room_width

if (team == ENEMY ) { 
    /*for (i=0;i&lt;hostile_units_num;i++) {
        enemy = instance_nearest(x,y,hostile_units[i])
        distance = distance_to_object(enemy)
        if (distance &lt; nearest_distance) {
            nearest_enemy = enemy
            nearest_distance = distance
        }
    } */
    if !ghost_building {
        while (all_collision_ellipse(x-ghost_fog_w, y-ghost_fog_h, x+ghost_fog_w, y+ghost_fog_h, obj_p0_unit_parent, false, true)) {
            if (global._id.team == ALLY) {
                ghost_building = instance_create(x,y,obj_ghost_building)
                ghost_building.sprite_copy = sprite_index
                ghost_building.sprite_copy_sub = image_index
                break;
            }
        } 
    }
    
    else if (ghost_building) {
        if (ghost_building.sprite_copy != sprite_index) {
            while (all_collision_ellipse(x-ghost_fog_w, y-ghost_fog_h, x+ghost_fog_w, y+ghost_fog_h, obj_p0_unit_parent, false, true)) {
                if (global._id.team == ALLY) {
                    ghost_building = instance_create(x,y,obj_ghost_building)
                    ghost_building.sprite_copy = sprite_index
                    break;
                }
            } 
        }
    }
    
    
    //nearest_enemy = 0
    //nearest_distance = 400
    
    //DBG if first time seeing building 
    /*
    if (nearest_distance &lt; 300 &amp;&amp; !ghost_building) {
        if (collision_ellipse(x-ghost_fog_w, y-ghost_fog_h, x+ghost_fog_w, y+ghost_fog_h, nearest_enemy, false, true)) {
            ghost_building = instance_create(x,y,obj_ghost_building)
            ghost_building.sprite_copy = sprite_index
        }
    }
    
    //DBG if seeing building again but it's more updated
    else if (nearest_distance &lt; 300  &amp;&amp; ghost_building &amp;&amp; (ghost_building.sprite_copy != sprite_index)) {
        if (collision_ellipse(x-ghost_fog_w, y-ghost_fog_h, x+ghost_fog_w, y+ghost_fog_h, nearest_enemy, false, true)) {
            //ghost_building = instance_create(x,y,obj_ghost_building)
            //ghost_building.sprite_copy = sprite_index
            ghost_building.sprite_copy = sprite_index
            obj_fog_of_war.alarm[1] = 1
        }
    }
    */
}

//Ghost building for Fog of War - end

//depth = -y

//Handles depth if currently looking
if (!is_built || !is_placed) {
    if (collision_point(mouse_x,mouse_y,EntireCliffs,true,true)) {
        cliff_sight = true;
    }     
}

//Handles movement of other units if in the way
//If PUT DOWN &amp; ATTEMPTING TO START BUT BUILDING HAS NOT BEEN STARTED
if (is_placed &amp;&amp; build_progress &gt; 0 &amp;&amp; !building_started) {
    
    while (all_collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_unit_parent,false,true)) {
        var freeze, build_id
        freeze = false
        build_id = id
        with (global._id) {
            if (collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,build_id,true,true)) {
            global._id.collide_building = id //Name of the variable with unit\
            global._id.alarm[4] = 1;
            freeze = true
            }
        }
        if (freeze) {
            build_progress = 0;
        }
    }
}

//If successfully started building with no obstacles
if (build_progress &gt; 0) {
    building_started = true;
}

//If the ghost is down
if (!building_started) {
    depth = -9000003
    // If unit creating is not going to this buildling when placed
    if (is_placed) {
        if instance_exists(unit_creating) {
            //If the unit creating this thing cancelled the walk
            if (!unit_creating.build_ing) {
                //Refund resources
                instance_destroy()
            }
        }
    }
}
else {
    if cliff_sight {
        depth = -y-room_height
    }
    else {
        depth = -y
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.PlayerId != ownerId) { exit; } //check that player owns unit
//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{


// waypointing - start
if selected = true
{
    if distance_to_point(mouse_x,mouse_y) &lt;= 1
    {
        waypointx = def_waypointx;
        waypointy = def_waypointy;
        waypoint_depth = -def_waypointy;
    }
    else
    {
        waypointx = mouse_x;
        waypointy = mouse_y;
        waypoint_depth = -mouse_y;
    }
}
//waypoinying - end


}
//if mouse is not in hud - end

//if has not been placed, delete
if is_placed = false
{
    instance_destroy();
    global.buildingbuilding = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.PlayerId != ownerId) { exit; } //check that player owns unit
//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{



// Building placement - start
if is_placed = false
{
    if place_yes = true
    {
    
        global.buildingbuilding = true;
        // old non-multiplayer
        /*is_placed = true;
        x = place_x;
        y = place_y;
        building_depth = -y;
        def_waypointx = x+def_waypointposx;
        def_waypointy = y+def_waypointposy;
        waypointx = def_waypointx;
        waypointy = def_waypointy;*/
        
        // send create building message
        write_ushort(global.ServerSocket,804); // message header: create building (net id)
        write_ushort(global.ServerSocket,building_type); // building type
        write_ubyte(global.ServerSocket,global.PlayerId); //owner
        write_short(global.ServerSocket,place_x); // x create
        write_short(global.ServerSocket,place_y); // y create
        
        // Make unit go to this thingy
        unit_creating.selected = true
        global.number_of_selected += 1;
        unit_creating.move_x = mouse_x
        unit_creating.move_y = mouse_y
        unit_creating.able_to_move = true
        unit_creating.alarm[5] = 5
        
        // destroy object
        if selected = true 
        {
            selected = false;
            global.number_of_selected -= 1 ;
        }
        instance_destroy();
    }
}
// Building placement - end

//selection - end
if is_placed = true
{
    if selected = true &amp;&amp; distance_to_point(mouse_x,mouse_y) &gt;= 1
    {
        selected = false;
        global.number_of_selected -= 1;
    }
}
//selection - end



}
//if mouse is not in hud - start
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.PlayerId != ownerId) { exit; } //check that player owns unit
//if mouse is not in hud - start
if mouse_y - view_yview[0] &lt;= obj_HUD.border
{



// Selection - start
if is_placed = true
{
    if selected = false &amp;&amp; global.buildingbuilding = false
    {
        selected = true;
        global.number_of_selected +=1;
    }
    else if (global.buildingbuilding) {
        global.buildingbuilding = false
    }
}
// Selection - end



}
// mouse not in hud - end
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Selection - start
if selected = true
{
    //depth = building_depth;
    draw_set_color(c_lime);
    draw_ellipse(x+selectcx1,y+selectcy1,x+selectcx2,y+selectcy2,true);
}
//Selection - end

//Building placement - start
if is_built = false &amp;&amp; is_placed = false
{
    x = -100;
    y = -100;
    nrst_ally = instance_nearest(mouse_x,mouse_y,obj_ally_parent);
    if (instance_exists(obj_blocked_by_building_parent)) {
        temp_nearest = instance_nearest(mouse_x,mouse_y,obj_blocked_by_building_parent);
    }
    else {
        temp_nearest = nrst_ally;
    }
    x = mouse_x;
    y = mouse_y; 
    
    //Debug MAYBE permanent draw bbox
    draw_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,1)
    global.placingBuilding = true;
    
    //if (distance_to_object(temp_nearest) &lt;= 100 || distance_to_object(nrst_ally)&gt;build_range )
    //if (distance_to_object(temp_nearest) &lt;= 5) //|| distance_to_object(nrst_ally)&gt;build_range )
    if (collision_ellipse(bbox_left,bbox_top,bbox_right,bbox_bottom,obj_blocked_by_building_parent,true,true) &gt; 1000)
    { 
        temp_x = x;
        temp_y = y;
        place_yes = false;
        draw_sprite(g_build_no,-1,temp_x,temp_y);
        //depth = -9000002; // this is not working for some reason
        x = -100;
        y = -100;
        
    }
    else
    {
        //New code to detect tiles
        disable = 0;
        tempbbox_left = floor(bbox_left/obj_map.map_col_width)*obj_map.map_col_width;
        tempbbox_top = floor(bbox_top/obj_map.map_row_height)*obj_map.map_row_height;
        
        for (i=tempbbox_left;i&lt;bbox_right;i+=obj_map.map_col_width) {
            for (z=tempbbox_top;z&lt;bbox_bottom;z+=obj_map.map_row_height) {
                
                //Creating this for loop because of out-of-bounds errors
                if (z &lt; 0 || z &gt; room_height || i &lt; 0 || i &gt; room_width) {
                    disable = 1;
                    break;
                }
                //Convert x/y axis to quick-to-read obj_map 2d array
                if (obj_map.cell[i/obj_map.map_col_width,z/obj_map.map_row_height] &lt; 0) {
                    if (collision_point(i,z,id,true,false)) {
                        disable = 1;
                        break;
                    }
                }
            }
            
            if (disable = 1) {
                break;
            }
        }    
        if (disable = 1) {
            temp_x = x;
            temp_y = y;
            place_yes = false;
            //depth = -9000002; // this is not working for some reason
            draw_sprite(g_build_no,-1,temp_x,temp_y);
            x = -100;
            y = -100;
        }
        //End code to detect tiles
        else {
            place_x = mouse_x;
            place_y = mouse_y;
            temp_x = x;
            temp_y = y;
            place_yes = true;
            //depth = -9000002
            draw_sprite(g_build_yes,-1,temp_x,temp_y);
            x = -100;
            y = -100;
        }
    }
}

if global.placingBuilding == true {
    draw_triangle(bbox_left,y,bbox_right,y,x,bbox_top,1);
    draw_triangle(bbox_left,y,bbox_right,y,x,bbox_bottom,1);
}

if is_built = false &amp;&amp; is_placed = true
{
    //depth = building_depth;
    if (build_progress &gt; 0) {
        draw_set_alpha(1)
    }
    else {
        if (team = ENEMY) {
            exit;
        }
        draw_set_alpha(0.5)
    }
    draw_sprite(g_building,floor((build_progress/build_time)*g_build_num),x,y);
    draw_set_alpha(1)
}

if is_built = true &amp;&amp; is_placed = true
{
    //depth = building_depth;
    draw_set_blend_mode(bm_normal)
    draw_set_alpha(1)
    draw_sprite(g_built,-1,x,y);
    
    if (selected==true){/*depth=waypoint_depth;*/draw_sprite(waypoint_spr,-1,waypointx,waypointy);}
}
//Building placement - end

//Health Bar - start
if ((is_placed==true)&amp;&amp;((selected==true)||(distance_to_point(mouse_x, mouse_y)&lt;=0)))
{
    //depth = building_depth;
    _len = (healthbar_length*(unit_hp/unit_hp_max)); 
    draw_set_alpha(1);
    draw_set_color(healthbar_bg_col);
    draw_rectangle(x+healthbar_x,y+healthbar_y,x+healthbar_x+healthbar_length,y+healthbar_y+healthbar_height,false);
    draw_set_color(healthbar_fg_col);
    draw_rectangle(x+healthbar_x+1,y+healthbar_y+1,x+healthbar_x+_len-1,y+healthbar_y+healthbar_height-1,false);
}
//Health Bar - end

// Setting colors to differentiate owners of units
if (ownerId&lt;global.ServerPlyrCnt) // draw player color
{
    draw_set_alpha(0.5);
    draw_set_color(global.p_col[ownerId]);
    draw_rectangle(x-8, y-16, x+8, y+16, false);
}
//if (object_is_ancestor(self.object_index,obj_enem_parent)) // if enemy
if (team == ENEMY)
{
    //Red box (temp color)
    draw_set_alpha(1);
    draw_set_color(c_red);
    draw_rectangle(x-8, y-16, x+8, y+16, true);
    
    //Debug for fog of war
    draw_ellipse(x-ghost_fog_w, y-ghost_fog_h, x+ghost_fog_w, y+ghost_fog_h, true);

}
else
if (global.PlayerId!=ownerId) // if ally (not own units)
{
    //Cyan box (temp color)
    draw_set_alpha(1);
    draw_set_color(c_aqua);
    draw_rectangle(x-8, y-16, x+8, y+16, true);
}

// temp debugging
//draw_set_alpha(1);
//draw_set_color(c_white);
//draw_text(x+16,y-16,string(netId));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

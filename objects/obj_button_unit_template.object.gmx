<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_button_mask</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000004</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// setup //
/*var*/ xpos = 99;
/*var*/ ypos = 99;
/*var*/ active = false
/*var*/ //spr_but_up = spr_button_test;
/*var*/ //spr_but_down = spr_button_test2;
/*var*/ //spr_but_inact = spr_button_test;
/*var*/ spr_state = 0; // 0 = up, 1 = down, 2 = inactive, you can add more if you want

//hotkey system
/*var*/ //hotkey = "0" //the hotkey that this button is assigned to
/*var*/ 

// Building Variables
/*var*/ //buildv_unit = obj_unit_template_true; // the unit that will be created using this button
/*var*/ //buildv_time = 20; // how long it takes to build the unit (20 = about 3 seconds (NOTE! higher values decease the time, lower values increase time))
/*var*/ //buildv_name = "Template Unit"; // Name of the unit being built
/*var*/ //buildv_icon = spr_man_icon; // icon used when the unit is being built
/*var*/ //buildv_cost
/*var*/ 
/*var*/ 
/* Network only - start */
//buildv_unit_type = 1; // index of unit to be built (found in create event of obj_client)
/* Network only - end */

// Resource costs
//rcost1 = 0;
//rcost2 = 0;
//rcost3 = 0;
//rcost4 = 0;
//rcost5 = 0;

//tooltip system
/*var*/ //text[0] = ""
/*var*/ //text[1] = ""
/*var*/ //text[2] = ""
/*var*/ //text[3] = ""
/*var*/ //text[4] = ""
/*var*/ //text_used = 0
/*var*/ mouse_over = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spr_state = 0;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// activate tooltip
if (mouse_over)
{
    obj_tooltip_manager.text[0] = text[0];
    obj_tooltip_manager.text[1] = text[1];
    obj_tooltip_manager.text[2] = text[2];
    obj_tooltip_manager.text[3] = text[3];
    obj_tooltip_manager.text[4] = text[4];
    obj_tooltip_manager.text_used = text_used;
    obj_tooltip_manager.active = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//button positioning - start
x = view_xview[0]+xpos;
y = view_yview[0]+ypos;
//button positioning end

//hotkey system
if (keyboard_check_pressed(ord(hotkey)))
{
    //copy ALL the code you have in the left press event into this space
    if obj_HUD.target.is_built = true
    {
        if (obj_resource_manager.res1 &gt;= rcost1 &amp;&amp;
            obj_resource_manager.res2 &gt;= rcost2 &amp;&amp;
            obj_resource_manager.res3 &gt;= rcost3 &amp;&amp;
            obj_resource_manager.res4 &gt;= rcost4 &amp;&amp;
            obj_resource_manager.res5 &gt;= rcost5)
        {
            //reduce resources
            obj_resource_manager.res1 -= rcost1;
            obj_resource_manager.res2 -= rcost2;
            obj_resource_manager.res3 -= rcost3;
            obj_resource_manager.res4 -= rcost4;
            obj_resource_manager.res5 -= rcost5;
    
            switch (obj_HUD.target.buildq_contain)
            {
                case 0: {obj_HUD.target.make_power = buildv_time;
                        if (global.multiplayer_game) { obj_HUD.target.buildq_cur = buildv_unit_type; } else { obj_HUD.target.buildq_cur = buildv_unit; }
                        obj_HUD.target.buildq_cur_n = buildv_name;
                        obj_HUD.target.buildq_cur_i = buildv_icon;
                        obj_HUD.target.make_time = true;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 1: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s1 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s1 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s1_time = buildv_time;
                        obj_HUD.target.buildq_trans_s1_n = buildv_name;
                        obj_HUD.target.buildq_trans_s1_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 2: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s2 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s2 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s2_time = buildv_time;
                        obj_HUD.target.buildq_trans_s2_n = buildv_name;
                        obj_HUD.target.buildq_trans_s2_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 3: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s3 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s3 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s3_time = buildv_time;
                        obj_HUD.target.buildq_trans_s3_n = buildv_name;
                        obj_HUD.target.buildq_trans_s3_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 4: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s4 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s4 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s4_time = buildv_time;
                        obj_HUD.target.buildq_trans_s4_n = buildv_name;
                        obj_HUD.target.buildq_trans_s4_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 5: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s5 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s5 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s5_time = buildv_time;
                        obj_HUD.target.buildq_trans_s5_n = buildv_name;
                        obj_HUD.target.buildq_trans_s5_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 6: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s6 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s6 = buildv_unit; }
                        obj_HUD.target.buildq_trans_s6_time = buildv_time;
                        obj_HUD.target.buildq_trans_s6_n = buildv_name;
                        obj_HUD.target.buildq_trans_s6_i = buildv_icon;
                        obj_HUD.target.buildq_contain+=1;} break;
                case 7: {/* Use this to draw an error "Queue full" */obj_message_system.message_recieved = "Queue full";} break;
            }
        }
        else
        {
            // send message not enough resources
            obj_message_system.message_recieved = "Not enough resources"
        }
    }
    else
    {
        // send message: building not built
        obj_message_system.message_recieved = "Building is not finished"
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_over = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mouse_over = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//clicking effect - start
spr_state = 1;
alarm[0] = 1;
//clicking effect - end

//your own code to what happens when you press this button
if obj_HUD.target.is_built = true
{
    if (obj_resource_manager.res1 &gt;= rcost1 &amp;&amp;
        obj_resource_manager.res2 &gt;= rcost2 &amp;&amp;
        obj_resource_manager.res3 &gt;= rcost3 &amp;&amp;
        obj_resource_manager.res4 &gt;= rcost4 &amp;&amp;
        obj_resource_manager.res5 &gt;= rcost5)
    {
        //reduce resources
        obj_resource_manager.res1 -= rcost1;
        obj_resource_manager.res2 -= rcost2;
        obj_resource_manager.res3 -= rcost3;
        obj_resource_manager.res4 -= rcost4;
        obj_resource_manager.res5 -= rcost5;
    
        switch (obj_HUD.target.buildq_contain)
        {
            case 0: {obj_HUD.target.make_power = buildv_time;
                    if (global.multiplayer_game) { obj_HUD.target.buildq_cur = buildv_unit_type; } else { obj_HUD.target.buildq_cur = buildv_unit; }
                    obj_HUD.target.buildq_cur_n = buildv_name;
                    obj_HUD.target.buildq_cur_i = buildv_icon;
                    obj_HUD.target.make_time = true;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 1: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s1 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s1 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s1_time = buildv_time;
                    obj_HUD.target.buildq_trans_s1_n = buildv_name;
                    obj_HUD.target.buildq_trans_s1_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 2: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s2 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s2 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s2_time = buildv_time;
                    obj_HUD.target.buildq_trans_s2_n = buildv_name;
                    obj_HUD.target.buildq_trans_s2_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 3: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s3 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s3 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s3_time = buildv_time;
                    obj_HUD.target.buildq_trans_s3_n = buildv_name;
                    obj_HUD.target.buildq_trans_s3_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 4: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s4 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s4 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s4_time = buildv_time;
                    obj_HUD.target.buildq_trans_s4_n = buildv_name;
                    obj_HUD.target.buildq_trans_s4_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 5: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s5 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s5 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s5_time = buildv_time;
                    obj_HUD.target.buildq_trans_s5_n = buildv_name;
                    obj_HUD.target.buildq_trans_s5_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 6: {if (global.multiplayer_game) { obj_HUD.target.buildq_trans_s6 = buildv_unit_type; } else { obj_HUD.target.buildq_trans_s6 = buildv_unit; }
                    obj_HUD.target.buildq_trans_s6_time = buildv_time;
                    obj_HUD.target.buildq_trans_s6_n = buildv_name;
                    obj_HUD.target.buildq_trans_s6_i = buildv_icon;
                    obj_HUD.target.buildq_contain+=1;} break;
            case 7: {/* Use this to draw an error "Queue full" */obj_message_system.message_recieved = "Queue full";} break;
        }
    }
    else
    {
        // send message not enough resources
        obj_message_system.message_recieved = "Not enough resources"
    }
}
else
{
    // send message: building not built
    obj_message_system.message_recieved = "Building is not finished"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//drawing the button - start
switch (spr_state)
{
    case 0:
        draw_sprite(spr_but_up,-1,view_xview[0]+xpos,view_yview[0]+ypos)
    break;
    
    case 1:
        draw_sprite(spr_but_down,-1,view_xview[0]+xpos,view_yview[0]+ypos)
    break;
    
    case 2:
        draw_sprite(spr_but_inact,-1,view_xview[0]+xpos,view_yview[0]+ypos)
    break;
}
//drawing the button - end
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_tree</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_resource_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* - Setup - */
/*var*/ //type = 0; // 0 = mining, 1 = collect
/*var*/ //area_size = 5; // collection radius of res, in pixels
/*var*/ //resource_num = 1;
/*var*/ //resource_amount = 100; // how many resources you can gather from this
/*var*/ //resource_amount_max = 100;
/*var*/ //resource_name = "Tree";
/*var*/ //res_spr = spr_tree; // the res graphic
/*var*/ //res_spr_full = 0; // the image index wich show the res at max
/*var*/ //res_spr_med = 1; // the image index wich show the res at medium
/*var*/ //res_spr_low = 2; // the image index wich show the res at low
/*var*/ 
/*var*/ 
/*var*/ 
cliff_sight = false
if (collision_point(x,y,EntireCliffs,true,true)) {
    cliff_sight = true
}

// Network
send_threshold = 20; // when to send the change in value
prev_threshold = resource_amount_max;
num_harvesting = 0;

alarm[0] = 1

ghost_resource = instance_create(x,y,obj_ghost_resource)
ghost_resource.sprite_copy = sprite_index
ghost_resource.sprite_copy_sub = image_index
ghost_resource.sprite_copy_offset = y_offset
ghost_resource.cliff_sight = cliff_sight
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>as_map_setcell(obj_map.map,x/obj_map.map_col_width,((y)/obj_map.map_row_height),-1)
as_map_setcell(obj_map.map,(x/obj_map.map_col_width)-1,((y)/obj_map.map_row_height),-1)



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!cliff_sight) {depth = -y}
else {depth = -y - room_height}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.multiplayer_game)
{
    if (resource_amount &lt;= 0)
    {
        // send death message
        write_ushort(global.ServerSocket,20); // message header: broadcast message
        write_ubyte(global.ServerSocket,6); // message size
        write_ushort(global.ServerSocket,701); // message header: destroy resource
        write_uint(global.ServerSocket,self.id); // resource id
        
        as_map_setcell(obj_map.map,x/obj_map.map_col_width,((y)/obj_map.map_row_height),1)
        as_map_setcell(obj_map.map,(x/obj_map.map_col_width)-1,((y)/obj_map.map_row_height),1)

        ghost_resource.resource_destroyed = true
        instance_destroy();
    }
    else if ( (prev_threshold-resource_amount) &gt;= send_threshold )
    {
        // send resource update message
        write_ushort(global.ServerSocket,20); // message header: broadcast message
        write_ubyte(global.ServerSocket,8); // message size
        write_ushort(global.ServerSocket,700); // message header: update resource amount
        write_uint(global.ServerSocket,self.id); // resource id
        write_ushort(global.ServerSocket,resource_amount); // resource amount
        
        prev_threshold = resource_amount;
    }
}
else if (resource_amount &lt;= 0) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;

draw_sprite(res_spr,-1,x,y - y_offset);

if resource_amount &lt;= resource_amount_max
{
    image_index = res_spr_full;
}
if resource_amount &lt; (resource_amount_max * 2)/3
{
    image_index = res_spr_med;
}
if resource_amount &lt; resource_amount_max/3
{
    image_index = res_spr_low;
}

//debug
//draw_text(x,y,string(resource_amount))
/*
//DBG draw BOUNDING BOX debug
draw_set_color(c_red);
draw_rectangle(bbox_left,bbox_top,bbox_right,bbox_bottom,true)

//DBG draw X and Y COORDINATE debug
draw_set_color(c_blue);
draw_rectangle(x-5,y-5,x+5,y+5,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

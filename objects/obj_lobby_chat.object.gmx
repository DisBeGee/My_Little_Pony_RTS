<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9000003</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// setup
chat_x = 9; //xposition of the message, relative to the view port
chat_y = 432; //xposition of the message, relative to the view port
chat_ygap = 19; //y - gap between texts
chat_queue[0] = 99 //this array holds the list of messages to show
chat_queue_life[0] = 99; //How long each message in queue has left to live
chat_life = 200; // how long the message stays on screen
chat_cap = 11; // the max amount of messages allowed to be shown
chat_count = 0; //the amount of messages in the chat queue

chat_col = c_white; //the color of the text

chat_queue_owner[0] = 99; //owner of the corresponding message

chat_local_hotkey = vk_enter; //local chat hotkey
chat_global_modifier = vk_shift; //global chat hotkey
chat_send_hotkey = vk_enter; //hotkey for sending the message
chat_active = true;
chat_message = "99"; //holds the message to be sent

chat_limit = 59; //limit on how long messages can be
chat_width = 59; //width of the box where you enter your message into
chat_prev_hotkey = "Z" //hotkey for displaying previous messages
hotkeyCheck = false;

message_x = 7; //xpos of the area where you type the message
message_y = 457; //ypos of the area where you type the message
message_box_x = 5; //xpos of message box
message_box_y = 455; //ypos of message box
message_box_width = 630; //width of the message box
message_box_height = 20; //height of the message box
message_box_bordercol = c_navy; //color of border
message_box_bgcol = c_gray; //color of background
message_box_bgalpha = 0.6; //alpha of background
message_col = c_white;
message_font = font_chat_message; //use a monospaced font for best results

chat_font = font_chat_message;
chat_boxx1 = 5;
chat_boxy1 = 240;
chat_boxx2 = 635;
chat_boxy2 = 450;
chat_box_bordercol = c_navy; //color of border
chat_box_bgcol = c_gray; //color of background
chat_box_bgalpha = 0.6; //alpha of background
p_name_col = c_navy;

//initialise the arrays
for (i=0;i&lt;chat_cap;i+=1)
{
    chat_queue[i] = "99";
    chat_queue_life[i] = "99";
    chat_queue_owner[i] = 99;
}

keyboard_string = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// message sending - start
//enforce message limit
if (string_length(keyboard_string) &gt; chat_limit)
{
    keyboard_string = string_copy(keyboard_string,0,chat_limit);
}
    
if (keyboard_check_pressed(chat_send_hotkey))
{
    //put message into chat queue
    msg = keyboard_string;
        
    if (string_length(msg)&gt;0)
    {      
        // send others message
        write_ushort(global.ServerSocket,901); //message header: lobby chat message
        write_ubyte(global.ServerSocket,1+string_length(msg)); // size
        write_ubyte(global.ServerSocket,string_length(msg)); // message length
        write_string(global.ServerSocket,msg) // actual message
    }
        
    keyboard_string = "";
}
// message sending - end
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw lobby chat box
draw_set_color(chat_box_bgcol);
draw_set_alpha(chat_box_bgalpha);
draw_rectangle(chat_boxx1,chat_boxy1,chat_boxx2,chat_boxy2,false);
draw_set_color(chat_box_bordercol);
draw_set_alpha(1);
draw_rectangle(chat_boxx1,chat_boxy1,chat_boxx2,chat_boxy2,true);

// draw messages
if (chat_count&gt;0)
{
    for (i=0;i&lt;chat_cap;i+=1)
    {
        if (chat_queue_owner[i]!=99)
        {
            draw_set_alpha(1);
            draw_set_color(p_name_col); // Set to some color
            draw_set_font(chat_font);
            draw_text(chat_x,chat_y-(i*chat_ygap),obj_client.lobby_p_name[chat_queue_owner[i]])
            namLeng = string_width(obj_client.lobby_p_name[chat_queue_owner[i]]) + /*padding*/ 3;
            draw_set_color(chat_col);
            draw_text(chat_x+namLeng,chat_y-(i*chat_ygap),":"+chat_queue[i]);
            draw_set_font(-1)//reset font to default
        }
    }
}

// message box
if (chat_active)
{
    //message box
    draw_set_color(message_box_bgcol);
    draw_set_alpha(message_box_bgalpha);
    draw_rectangle(message_box_x,message_box_y,message_box_x+message_box_width,message_box_y+message_box_height,false);
    draw_set_color(message_box_bordercol);
    draw_set_alpha(1);
    draw_rectangle(message_box_x,message_box_y,message_box_x+message_box_width,message_box_y+message_box_height,true);
    //message
    if (string_length(keyboard_string) &gt; chat_width)
    {
        visMsg = string_copy(keyboard_string,string_length(keyboard_string)-(chat_width-1),(chat_width));
    }
    else
    {
        visMsg = keyboard_string;
    }
    
    draw_set_alpha(1);
    draw_set_color(message_col);
    draw_set_font(message_font);
    draw_text(message_x,message_y,"(Chat):"+visMsg);
    draw_set_font(-1)//reset font to default
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
